{
  "resourceType": "Library",
  "id": "library-hospice-FHIR",
  "meta": {
    "profile": "http://hl7.org/fhir/us/cqframework/cqfmeasures/StructureDefinition/library-cqfm"
  },
  "url": "http://hl7.org/fhir/us/cqframework/cqfmeasures/Library/library-hospice-FHIR",
  "identifier": [
    {
      "use": "official",
      "system": "http://example.org/fhir/cqi/ecqm/Library/Identifier",
      "value": "Hospice_FHIR"
    }
  ],
  "version": "1.0.000",
  "name": "Hospice_FHIR",
  "title": "Hospice FHIR",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "2019-09-03",
  "publisher": "Health Level 7 International - Clinical Quality Information Work Group",
  "description": "This library is used as an example in the FHIR Quality Measure Implementation Guide",
  "approvalDate": "2019-08-03",
  "lastReviewDate": "2019-08-03",
  "contact": [
    {
      "telecom": [
        {
          "system": "url",
          "value": "http://www.hl7.org/Special/committees/cqi/index.cfm"
        }
      ]
    }
  ],
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-fhir-model-definition"
      }
    },
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-mat-global-common-functions-FHIR"
      }
    },
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-fhir-helpers"
      }
    }
  ],
  "dataRequirement": [
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    },
    {
      "type": "Location",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
        }
      ]
    },
    {
      "type": "ProcedureRequest",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1108.15"
        }
      ]
    },
    {
      "type": "Procedure",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "https://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1108.15"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": "bGlicmFyeSBIb3NwaWNlX0ZISVIgdmVyc2lvbiAnMS4wLjAwMCd1c2luZyBGSElSIHZlcnNpb24gJzMuMC4wJ2luY2x1ZGUgTUFUR2xvYmFsQ29tbW9uRnVuY3Rpb25zX0ZISVIgdmVyc2lvbiAnMi4wLjAwMCcgY2FsbGVkIEdsb2JhbGluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnMy4wLjAnIGNhbGxlZCBGSElSSGVscGVyc2NvZGVzeXN0ZW0gIlNOT01FRENUOjIwMTctMDkiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdC83MzEwMDAxMjQxMDgnIHZlcnNpb24gJ2h0dHA6Ly9zbm9tZWQuaW5mby9zY3QvNzMxMDAwMTI0MTA4L3ZlcnNpb24vMjAxNzA5J3ZhbHVlc2V0ICJFbmNvdW50ZXIgSW5wYXRpZW50IjogJ2h0dHBzOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy42NjYuNS4zMDcndmFsdWVzZXQgIkhvc3BpY2UgY2FyZSBhbWJ1bGF0b3J5IjogJ2h0dHBzOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjExMDguMTUnY29kZSAiRGlzY2hhcmdlIHRvIGhlYWx0aGNhcmUgZmFjaWxpdHkgZm9yIGhvc3BpY2UgY2FyZSAocHJvY2VkdXJlKSI6ICc0MjgzNzEwMDAxMjQxMDAnIGZyb20gIlNOT01FRENUOjIwMTctMDkiIGRpc3BsYXkgJ0Rpc2NoYXJnZSB0byBoZWFsdGhjYXJlIGZhY2lsaXR5IGZvciBob3NwaWNlIGNhcmUgKHByb2NlZHVyZSknY29kZSAiRGlzY2hhcmdlIHRvIGhvbWUgZm9yIGhvc3BpY2UgY2FyZSAocHJvY2VkdXJlKSI6ICc0MjgzNjEwMDAxMjQxMDcnIGZyb20gIlNOT01FRENUOjIwMTctMDkiIGRpc3BsYXkgJ0Rpc2NoYXJnZSB0byBob21lIGZvciBob3NwaWNlIGNhcmUgKHByb2NlZHVyZSknY29udGV4dCBQYXRpZW50ZGVmaW5lIGZ1bmN0aW9uICJIYXMgSG9zcGljZSIoTWVhc3VyZW1lbnRQZXJpb2QgSW50ZXJ2YWw8RGF0ZVRpbWU+KToJZXhpc3RzICgJICAgIFtFbmNvdW50ZXI6ICJFbmNvdW50ZXIgSW5wYXRpZW50Il0gRGlzY2hhcmdlSG9zcGljZQkJCXdoZXJlIERpc2NoYXJnZUhvc3BpY2Uuc3RhdHVzID0gJ2ZpbmFsJwkJCSAgICBhbmQgKAkJCSAgICAgICAgRkhJUkhlbHBlcnMuVG9Db25jZXB0KERpc2NoYXJnZUhvc3BpY2UuaG9zcGl0YWxpemF0aW9uLmRpc2NoYXJnZURpc3Bvc2l0aW9uKS5jb2Rlc1swXSB+ICJEaXNjaGFyZ2UgdG8gaG9tZSBmb3IgaG9zcGljZSBjYXJlIChwcm9jZWR1cmUpIgkJCQkJICAgIG9yIEZISVJIZWxwZXJzLlRvQ29uY2VwdChEaXNjaGFyZ2VIb3NwaWNlLmhvc3BpdGFsaXphdGlvbi5kaXNjaGFyZ2VEaXNwb3NpdGlvbikuY29kZXNbMF0gfiAiRGlzY2hhcmdlIHRvIGhlYWx0aGNhcmUgZmFjaWxpdHkgZm9yIGhvc3BpY2UgY2FyZSAocHJvY2VkdXJlKSIJCQkgICAgKQkJCQlhbmQgRGlzY2hhcmdlSG9zcGljZS5wZXJpb2QgZW5kcyBkdXJpbmcgZGF5IG9mIE1lYXN1cmVtZW50UGVyaW9kCSkgICAgb3IgZXhpc3RzICggICAgICAgIFtQcm9jZWR1cmVSZXF1ZXN0OiAiSG9zcGljZSBjYXJlIGFtYnVsYXRvcnkiXSBIb3NwaWNlT3JkZXIgICAgICAgICAgICB3aGVyZSBIb3NwaWNlT3JkZXIuaW50ZW50ID0gJ29yZGVyJyAgICAgICAgICAgICAgICBhbmQgSG9zcGljZU9yZGVyLmF1dGhvcmVkT24gaW4gZGF5IG9mIE1lYXN1cmVtZW50UGVyaW9kICAgICkgICAgb3IgZXhpc3RzICggICAgICAgIFtQcm9jZWR1cmU6ICJIb3NwaWNlIGNhcmUgYW1idWxhdG9yeSJdIEhvc3BpY2VQZXJmb3JtZWQgICAgICAgICAgICB3aGVyZSBIb3NwaWNlUGVyZm9ybWVkLnN0YXR1cyA9ICdjb21wbGV0ZWQnICAgICAgICAgICAgICAgIGFuZCBHbG9iYWwuIkdldCBDaG9pY2UgSW50ZXJ2YWwgLSBkYXRlVGltZSBvciBQZXJpb2QiKEhvc3BpY2VQZXJmb3JtZWQucGVyZm9ybWVkKSBvdmVybGFwcyBNZWFzdXJlbWVudFBlcmlvZCAgICAp"
    }
  ]
}