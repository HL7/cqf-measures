{
  "resourceType": "Library",
  "id": "matglobalcommonfunctions-fhir",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">matglobalcommonfunctions-fhir</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>system: </b><span>http://terminology.hl7.org/CodeSystem/library-type</span><br/></span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.000</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr>  <!-- <th:block th:each=\"cont, iter : ${resource.contributor}\"> -->  <!-- <tr style=\"vertical-align: top;\"> -->  <!-- <th th:if=\"${iter.index == 0}\" th:rowspan=\"${iter.size}\"  scope=\"row\"><b>Contributor: </b></th> -->  <!-- <td style=\"padding-left: 25px; padding-right: 25px;\"> -->  <!-- <b><span th:narrative=\"${cont.type.toCode()}\"></span>: </b><span th:narrative=\"${cont.name}\"></span> -->  <!-- </td> -->  <!-- </tr> -->  <!-- </th:block> --><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/fhirhelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"5\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span><span style=\"padding-left: 25px;\"><b>valueset: </b><span></span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span><span style=\"padding-left: 25px;\"><b>valueset: </b><span></span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Location</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span><span style=\"padding-left: 25px;\"><b>valueset: </b><span></span></span></p></div></td></tr>  <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library MATGlobalCommonFunctions_FHIR version '2.0.000'\n\n/*\nThis example is a work in progress and should not be considered a final specification\nor recommendation for guidance. This example will help guide and direct the process\nof finding conventions and usage patterns that meet the needs of the various stakeholders\nin the measure development community.\n*/\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\n\ncodesystem \"LOINC\": 'http://loinc.org'\ncodesystem \"SNOMEDCT\": 'http://snomed.info/sct/731000124108'\ncodesystem \"RoleCode\": 'http://hl7.org/fhir/v3/RoleCode'\ncodesystem \"Diagnosis Role\": 'http://hl7.org/fhir/diagnosis-role'\n\nvalueset \"Encounter Inpatient\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307'\nvalueset \"Emergency Department Visit\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292'\n\ncode \"Birthdate\": '21112-8' from \"LOINC\" display 'Birth date'\ncode \"Dead\": '419099009' from \"SNOMEDCT\" display 'Dead'\ncode \"ER\": 'ER' from \"RoleCode\" display 'Emergency room'\ncode \"ICU\": 'ICU' from \"RoleCode\" display 'Intensive care unit'\ncode \"Billing\": 'billing' from \"Diagnosis Role\" display 'Billing'\n\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\ncontext Patient\n\ndefine \"Inpatient Encounter\":\n\t[Encounter: \"Encounter Inpatient\"] EncounterInpatient\n\t\twhere EncounterInpatient.status = 'finished'\n\t\t    and \"LengthInDays\"(EncounterInpatient.period) &lt;= 120\n\t\t\tand EncounterInpatient.period ends during \"Measurement Period\"\n\ndefine function \"ToDate\"(Value DateTime):\n\tDateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\n\ndefine function \"CalendarAgeInDaysAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tdays between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInDays\"(BirthDateTime DateTime):\n\tCalendarAgeInDaysAt(BirthDateTime, Today())\n\ndefine function \"CalendarAgeInMonthsAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tmonths between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInMonths\"(BirthDateTime DateTime):\n\tCalendarAgeInMonthsAt(BirthDateTime, Today())\n\ndefine function \"CalendarAgeInYearsAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tyears between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInYears\"(BirthDateTime DateTime):\n\tCalendarAgeInYearsAt(BirthDateTime, Today())\n\ndefine function \"LengthInDays\"(Value Interval&lt;DateTime&gt;):\n\tdifference in days between start of Value and end of Value\n\ndefine function \"ED Visit\"(TheEncounter FHIR.Encounter):\n    singleton from (\n        [Encounter: \"Emergency Department Visit\"] EDVisit\n            where EDVisit.status = 'finished'\n                and EDVisit.period ends 1 hour or less on or before start of FHIRHelpers.ToInterval(TheEncounter.period)\n    )\n\ndefine function \"Hospitalization\"(TheEncounter FHIR.Encounter):\n\t( \"ED Visit\"(TheEncounter) ) X\n    return\n        if X is null then TheEncounter.period\n        else Interval[start of FHIRHelpers.ToInterval(X.period), end of FHIRHelpers.ToInterval(TheEncounter.period)]\n\ndefine function \"Hospitalization Locations\"(TheEncounter FHIR.Encounter):\n\t( \"ED Visit\"(TheEncounter) ) EDEncounter\n    return\n        if EDEncounter is null then TheEncounter.location\n        else flatten { EDEncounter.location, TheEncounter.location }\n\ndefine function \"Hospitalization Length of Stay\"(TheEncounter FHIR.Encounter):\n\tLengthInDays(\"Hospitalization\"(TheEncounter))\n\ndefine function \"Hospital Admission Time\"(TheEncounter FHIR.Encounter):\n\tstart of \"Hospitalization\"(TheEncounter)\n\ndefine function \"Hospital Discharge Time\"(TheEncounter FHIR.Encounter):\n\tend of FHIRHelpers.ToInterval(TheEncounter.period)\n\ndefine function \"Hospital Arrival Time\"(TheEncounter FHIR.Encounter):\n\tstart of FHIRHelpers.ToInterval(First(\n\t    ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t).period)\n\n// TODO - fix these (must fetch Location resources and compare id to reference)\n/*define function \"Hospital Departure Time\"(TheEncounter FHIR.Encounter):\n\tend of FHIRHelpers.ToInterval(Last(\n\t    ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t).period)\n\ndefine function \"Emergency Department Arrival Time\"(TheEncounter FHIR.Encounter):\n\tstart of FHIRHelpers.ToInterval((\n\t    singleton from (\n\t        ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\t\twhere HospitalLocation.type ~ \"ER\"\n\t\t)\n\t).period)\n\ndefine function \"First Inpatient Intensive Care Unit\"(TheEncounter FHIR.Encounter):\n\tFirst(\n\t    ( TheEncounter.location ) HospitalLocation\n\t\t\twhere HospitalLocation.type ~ \"ICU\"\n\t\t\t\tand HospitalLocation.period during TheEncounter.period\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t)*/\n\n\n\n\n/*\n*\n*    CQFMeasures Common Logic\n*\n*/\n\ndefine function \"Normalize Onset\"(onset Choice&lt;FHIR.dateTime, FHIR.Age, FHIR.Period, FHIR.Range, FHIR.string&gt;):\n  if onset is FHIR.dateTime then Interval[onset.value, onset.value]\n\telse if onset is FHIR.Period then FHIRHelpers.ToInterval(onset as FHIR.Period)\n\telse null\n\ndefine function \"Get Choice Interval - dateTime or Period\"(performed Choice&lt;FHIR.dateTime,FHIR.Period&gt;):\n\tif performed is FHIR.dateTime then Interval[performed.value, performed.value]\n\telse FHIRHelpers.ToInterval(performed as FHIR.Period)\n\ndefine function \"GetId\"(uri String):\n\tLast(Split(uri, '/'))\n\ndefine function \"EncounterDiagnosis\"(Encounter Encounter):\n  Encounter.diagnosis D\n    return singleton from ([Condition: id in \"GetId\"(D.condition.reference)])\n\n// Returns the condition that is specified as the principal diagnosis for the encounter\ndefine function \"PrincipalDiagnosis\"(Encounter Encounter):\n\t(singleton from (Encounter.diagnosis D where D.use ~ ToConcept(\"Billing\") and D.rank = 1)) PD\n\t\treturn singleton from ([Condition: id in \"GetId\"(PD.condition.reference)])\n\n// Returns the location for the given location reference\ndefine function GetLocation(reference Reference):\n  singleton from (\n    [Location: id in GetId(reference.reference)]\n  )\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "version": "2.0.000",
  "name": "MATGlobalCommonFunctions_FHIR",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "Library/fhirhelpers"
    }
  ],
  "dataRequirement": [
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    },
    {
      "type": "Location",
      "codeFilter": [
        {
          "path": "id"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": "bGlicmFyeSBNQVRHbG9iYWxDb21tb25GdW5jdGlvbnNfRkhJUiB2ZXJzaW9uICcyLjAuMDAwJwoKLyoKVGhpcyBleGFtcGxlIGlzIGEgd29yayBpbiBwcm9ncmVzcyBhbmQgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGEgZmluYWwgc3BlY2lmaWNhdGlvbgpvciByZWNvbW1lbmRhdGlvbiBmb3IgZ3VpZGFuY2UuIFRoaXMgZXhhbXBsZSB3aWxsIGhlbHAgZ3VpZGUgYW5kIGRpcmVjdCB0aGUgcHJvY2VzcwpvZiBmaW5kaW5nIGNvbnZlbnRpb25zIGFuZCB1c2FnZSBwYXR0ZXJucyB0aGF0IG1lZXQgdGhlIG5lZWRzIG9mIHRoZSB2YXJpb3VzIHN0YWtlaG9sZGVycwppbiB0aGUgbWVhc3VyZSBkZXZlbG9wbWVudCBjb21tdW5pdHkuCiovCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4wJwoKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMCcgY2FsbGVkIEZISVJIZWxwZXJzCgpjb2Rlc3lzdGVtICJMT0lOQyI6ICdodHRwOi8vbG9pbmMub3JnJwpjb2Rlc3lzdGVtICJTTk9NRURDVCI6ICdodHRwOi8vc25vbWVkLmluZm8vc2N0LzczMTAwMDEyNDEwOCcKY29kZXN5c3RlbSAiUm9sZUNvZGUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci92My9Sb2xlQ29kZScKY29kZXN5c3RlbSAiRGlhZ25vc2lzIFJvbGUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9kaWFnbm9zaXMtcm9sZScKCnZhbHVlc2V0ICJFbmNvdW50ZXIgSW5wYXRpZW50IjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjY2Ni41LjMwNycKdmFsdWVzZXQgIkVtZXJnZW5jeSBEZXBhcnRtZW50IFZpc2l0IjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yOTInCgpjb2RlICJCaXJ0aGRhdGUiOiAnMjExMTItOCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0JpcnRoIGRhdGUnCmNvZGUgIkRlYWQiOiAnNDE5MDk5MDA5JyBmcm9tICJTTk9NRURDVCIgZGlzcGxheSAnRGVhZCcKY29kZSAiRVIiOiAnRVInIGZyb20gIlJvbGVDb2RlIiBkaXNwbGF5ICdFbWVyZ2VuY3kgcm9vbScKY29kZSAiSUNVIjogJ0lDVScgZnJvbSAiUm9sZUNvZGUiIGRpc3BsYXkgJ0ludGVuc2l2ZSBjYXJlIHVuaXQnCmNvZGUgIkJpbGxpbmciOiAnYmlsbGluZycgZnJvbSAiRGlhZ25vc2lzIFJvbGUiIGRpc3BsYXkgJ0JpbGxpbmcnCgpwYXJhbWV0ZXIgIk1lYXN1cmVtZW50IFBlcmlvZCIgSW50ZXJ2YWw8RGF0ZVRpbWU+Cgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSAiSW5wYXRpZW50IEVuY291bnRlciI6CglbRW5jb3VudGVyOiAiRW5jb3VudGVyIElucGF0aWVudCJdIEVuY291bnRlcklucGF0aWVudAoJCXdoZXJlIEVuY291bnRlcklucGF0aWVudC5zdGF0dXMgPSAnZmluaXNoZWQnCgkJICAgIGFuZCAiTGVuZ3RoSW5EYXlzIihFbmNvdW50ZXJJbnBhdGllbnQucGVyaW9kKSA8PSAxMjAKCQkJYW5kIEVuY291bnRlcklucGF0aWVudC5wZXJpb2QgZW5kcyBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIKCmRlZmluZSBmdW5jdGlvbiAiVG9EYXRlIihWYWx1ZSBEYXRlVGltZSk6CglEYXRlVGltZSh5ZWFyIGZyb20gVmFsdWUsIG1vbnRoIGZyb20gVmFsdWUsIGRheSBmcm9tIFZhbHVlLCAwLCAwLCAwLCAwLCB0aW1lem9uZSBmcm9tIFZhbHVlKQoKZGVmaW5lIGZ1bmN0aW9uICJDYWxlbmRhckFnZUluRGF5c0F0IihCaXJ0aERhdGVUaW1lIERhdGVUaW1lLCBBc09mIERhdGVUaW1lKToKCWRheXMgYmV0d2VlbiBUb0RhdGUoQmlydGhEYXRlVGltZSlhbmQgVG9EYXRlKEFzT2YpCgpkZWZpbmUgZnVuY3Rpb24gIkNhbGVuZGFyQWdlSW5EYXlzIihCaXJ0aERhdGVUaW1lIERhdGVUaW1lKToKCUNhbGVuZGFyQWdlSW5EYXlzQXQoQmlydGhEYXRlVGltZSwgVG9kYXkoKSkKCmRlZmluZSBmdW5jdGlvbiAiQ2FsZW5kYXJBZ2VJbk1vbnRoc0F0IihCaXJ0aERhdGVUaW1lIERhdGVUaW1lLCBBc09mIERhdGVUaW1lKToKCW1vbnRocyBiZXR3ZWVuIFRvRGF0ZShCaXJ0aERhdGVUaW1lKWFuZCBUb0RhdGUoQXNPZikKCmRlZmluZSBmdW5jdGlvbiAiQ2FsZW5kYXJBZ2VJbk1vbnRocyIoQmlydGhEYXRlVGltZSBEYXRlVGltZSk6CglDYWxlbmRhckFnZUluTW9udGhzQXQoQmlydGhEYXRlVGltZSwgVG9kYXkoKSkKCmRlZmluZSBmdW5jdGlvbiAiQ2FsZW5kYXJBZ2VJblllYXJzQXQiKEJpcnRoRGF0ZVRpbWUgRGF0ZVRpbWUsIEFzT2YgRGF0ZVRpbWUpOgoJeWVhcnMgYmV0d2VlbiBUb0RhdGUoQmlydGhEYXRlVGltZSlhbmQgVG9EYXRlKEFzT2YpCgpkZWZpbmUgZnVuY3Rpb24gIkNhbGVuZGFyQWdlSW5ZZWFycyIoQmlydGhEYXRlVGltZSBEYXRlVGltZSk6CglDYWxlbmRhckFnZUluWWVhcnNBdChCaXJ0aERhdGVUaW1lLCBUb2RheSgpKQoKZGVmaW5lIGZ1bmN0aW9uICJMZW5ndGhJbkRheXMiKFZhbHVlIEludGVydmFsPERhdGVUaW1lPik6CglkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBzdGFydCBvZiBWYWx1ZSBhbmQgZW5kIG9mIFZhbHVlCgpkZWZpbmUgZnVuY3Rpb24gIkVEIFZpc2l0IihUaGVFbmNvdW50ZXIgRkhJUi5FbmNvdW50ZXIpOgogICAgc2luZ2xldG9uIGZyb20gKAogICAgICAgIFtFbmNvdW50ZXI6ICJFbWVyZ2VuY3kgRGVwYXJ0bWVudCBWaXNpdCJdIEVEVmlzaXQKICAgICAgICAgICAgd2hlcmUgRURWaXNpdC5zdGF0dXMgPSAnZmluaXNoZWQnCiAgICAgICAgICAgICAgICBhbmQgRURWaXNpdC5wZXJpb2QgZW5kcyAxIGhvdXIgb3IgbGVzcyBvbiBvciBiZWZvcmUgc3RhcnQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChUaGVFbmNvdW50ZXIucGVyaW9kKQogICAgKQoKZGVmaW5lIGZ1bmN0aW9uICJIb3NwaXRhbGl6YXRpb24iKFRoZUVuY291bnRlciBGSElSLkVuY291bnRlcik6CgkoICJFRCBWaXNpdCIoVGhlRW5jb3VudGVyKSApIFgKICAgIHJldHVybgogICAgICAgIGlmIFggaXMgbnVsbCB0aGVuIFRoZUVuY291bnRlci5wZXJpb2QKICAgICAgICBlbHNlIEludGVydmFsW3N0YXJ0IG9mIEZISVJIZWxwZXJzLlRvSW50ZXJ2YWwoWC5wZXJpb2QpLCBlbmQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChUaGVFbmNvdW50ZXIucGVyaW9kKV0KCmRlZmluZSBmdW5jdGlvbiAiSG9zcGl0YWxpemF0aW9uIExvY2F0aW9ucyIoVGhlRW5jb3VudGVyIEZISVIuRW5jb3VudGVyKToKCSggIkVEIFZpc2l0IihUaGVFbmNvdW50ZXIpICkgRURFbmNvdW50ZXIKICAgIHJldHVybgogICAgICAgIGlmIEVERW5jb3VudGVyIGlzIG51bGwgdGhlbiBUaGVFbmNvdW50ZXIubG9jYXRpb24KICAgICAgICBlbHNlIGZsYXR0ZW4geyBFREVuY291bnRlci5sb2NhdGlvbiwgVGhlRW5jb3VudGVyLmxvY2F0aW9uIH0KCmRlZmluZSBmdW5jdGlvbiAiSG9zcGl0YWxpemF0aW9uIExlbmd0aCBvZiBTdGF5IihUaGVFbmNvdW50ZXIgRkhJUi5FbmNvdW50ZXIpOgoJTGVuZ3RoSW5EYXlzKCJIb3NwaXRhbGl6YXRpb24iKFRoZUVuY291bnRlcikpCgpkZWZpbmUgZnVuY3Rpb24gIkhvc3BpdGFsIEFkbWlzc2lvbiBUaW1lIihUaGVFbmNvdW50ZXIgRkhJUi5FbmNvdW50ZXIpOgoJc3RhcnQgb2YgIkhvc3BpdGFsaXphdGlvbiIoVGhlRW5jb3VudGVyKQoKZGVmaW5lIGZ1bmN0aW9uICJIb3NwaXRhbCBEaXNjaGFyZ2UgVGltZSIoVGhlRW5jb3VudGVyIEZISVIuRW5jb3VudGVyKToKCWVuZCBvZiBGSElSSGVscGVycy5Ub0ludGVydmFsKFRoZUVuY291bnRlci5wZXJpb2QpCgpkZWZpbmUgZnVuY3Rpb24gIkhvc3BpdGFsIEFycml2YWwgVGltZSIoVGhlRW5jb3VudGVyIEZISVIuRW5jb3VudGVyKToKCXN0YXJ0IG9mIEZISVJIZWxwZXJzLlRvSW50ZXJ2YWwoRmlyc3QoCgkgICAgKCAiSG9zcGl0YWxpemF0aW9uIExvY2F0aW9ucyIoVGhlRW5jb3VudGVyKSApIEhvc3BpdGFsTG9jYXRpb24KCQkJc29ydCBieSBzdGFydCBvZiBGSElSSGVscGVycy5Ub0ludGVydmFsKHBlcmlvZCkKCSkucGVyaW9kKQoKLy8gVE9ETyAtIGZpeCB0aGVzZSAobXVzdCBmZXRjaCBMb2NhdGlvbiByZXNvdXJjZXMgYW5kIGNvbXBhcmUgaWQgdG8gcmVmZXJlbmNlKQovKmRlZmluZSBmdW5jdGlvbiAiSG9zcGl0YWwgRGVwYXJ0dXJlIFRpbWUiKFRoZUVuY291bnRlciBGSElSLkVuY291bnRlcik6CgllbmQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChMYXN0KAoJICAgICggIkhvc3BpdGFsaXphdGlvbiBMb2NhdGlvbnMiKFRoZUVuY291bnRlcikgKSBIb3NwaXRhbExvY2F0aW9uCgkJCXNvcnQgYnkgc3RhcnQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChwZXJpb2QpCgkpLnBlcmlvZCkKCmRlZmluZSBmdW5jdGlvbiAiRW1lcmdlbmN5IERlcGFydG1lbnQgQXJyaXZhbCBUaW1lIihUaGVFbmNvdW50ZXIgRkhJUi5FbmNvdW50ZXIpOgoJc3RhcnQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbCgoCgkgICAgc2luZ2xldG9uIGZyb20gKAoJICAgICAgICAoICJIb3NwaXRhbGl6YXRpb24gTG9jYXRpb25zIihUaGVFbmNvdW50ZXIpICkgSG9zcGl0YWxMb2NhdGlvbgoJCQkJd2hlcmUgSG9zcGl0YWxMb2NhdGlvbi50eXBlIH4gIkVSIgoJCSkKCSkucGVyaW9kKQoKZGVmaW5lIGZ1bmN0aW9uICJGaXJzdCBJbnBhdGllbnQgSW50ZW5zaXZlIENhcmUgVW5pdCIoVGhlRW5jb3VudGVyIEZISVIuRW5jb3VudGVyKToKCUZpcnN0KAoJICAgICggVGhlRW5jb3VudGVyLmxvY2F0aW9uICkgSG9zcGl0YWxMb2NhdGlvbgoJCQl3aGVyZSBIb3NwaXRhbExvY2F0aW9uLnR5cGUgfiAiSUNVIgoJCQkJYW5kIEhvc3BpdGFsTG9jYXRpb24ucGVyaW9kIGR1cmluZyBUaGVFbmNvdW50ZXIucGVyaW9kCgkJCXNvcnQgYnkgc3RhcnQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChwZXJpb2QpCgkpKi8KCgoKCi8qCioKKiAgICBDUUZNZWFzdXJlcyBDb21tb24gTG9naWMKKgoqLwoKZGVmaW5lIGZ1bmN0aW9uICJOb3JtYWxpemUgT25zZXQiKG9uc2V0IENob2ljZTxGSElSLmRhdGVUaW1lLCBGSElSLkFnZSwgRkhJUi5QZXJpb2QsIEZISVIuUmFuZ2UsIEZISVIuc3RyaW5nPik6CiAgaWYgb25zZXQgaXMgRkhJUi5kYXRlVGltZSB0aGVuIEludGVydmFsW29uc2V0LnZhbHVlLCBvbnNldC52YWx1ZV0KCWVsc2UgaWYgb25zZXQgaXMgRkhJUi5QZXJpb2QgdGhlbiBGSElSSGVscGVycy5Ub0ludGVydmFsKG9uc2V0IGFzIEZISVIuUGVyaW9kKQoJZWxzZSBudWxsCgpkZWZpbmUgZnVuY3Rpb24gIkdldCBDaG9pY2UgSW50ZXJ2YWwgLSBkYXRlVGltZSBvciBQZXJpb2QiKHBlcmZvcm1lZCBDaG9pY2U8RkhJUi5kYXRlVGltZSxGSElSLlBlcmlvZD4pOgoJaWYgcGVyZm9ybWVkIGlzIEZISVIuZGF0ZVRpbWUgdGhlbiBJbnRlcnZhbFtwZXJmb3JtZWQudmFsdWUsIHBlcmZvcm1lZC52YWx1ZV0KCWVsc2UgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChwZXJmb3JtZWQgYXMgRkhJUi5QZXJpb2QpCgpkZWZpbmUgZnVuY3Rpb24gIkdldElkIih1cmkgU3RyaW5nKToKCUxhc3QoU3BsaXQodXJpLCAnLycpKQoKZGVmaW5lIGZ1bmN0aW9uICJFbmNvdW50ZXJEaWFnbm9zaXMiKEVuY291bnRlciBFbmNvdW50ZXIpOgogIEVuY291bnRlci5kaWFnbm9zaXMgRAogICAgcmV0dXJuIHNpbmdsZXRvbiBmcm9tIChbQ29uZGl0aW9uOiBpZCBpbiAiR2V0SWQiKEQuY29uZGl0aW9uLnJlZmVyZW5jZSldKQoKLy8gUmV0dXJucyB0aGUgY29uZGl0aW9uIHRoYXQgaXMgc3BlY2lmaWVkIGFzIHRoZSBwcmluY2lwYWwgZGlhZ25vc2lzIGZvciB0aGUgZW5jb3VudGVyCmRlZmluZSBmdW5jdGlvbiAiUHJpbmNpcGFsRGlhZ25vc2lzIihFbmNvdW50ZXIgRW5jb3VudGVyKToKCShzaW5nbGV0b24gZnJvbSAoRW5jb3VudGVyLmRpYWdub3NpcyBEIHdoZXJlIEQudXNlIH4gVG9Db25jZXB0KCJCaWxsaW5nIikgYW5kIEQucmFuayA9IDEpKSBQRAoJCXJldHVybiBzaW5nbGV0b24gZnJvbSAoW0NvbmRpdGlvbjogaWQgaW4gIkdldElkIihQRC5jb25kaXRpb24ucmVmZXJlbmNlKV0pCgovLyBSZXR1cm5zIHRoZSBsb2NhdGlvbiBmb3IgdGhlIGdpdmVuIGxvY2F0aW9uIHJlZmVyZW5jZQpkZWZpbmUgZnVuY3Rpb24gR2V0TG9jYXRpb24ocmVmZXJlbmNlIFJlZmVyZW5jZSk6CiAgc2luZ2xldG9uIGZyb20gKAogICAgW0xvY2F0aW9uOiBpZCBpbiBHZXRJZChyZWZlcmVuY2UucmVmZXJlbmNlKV0KICApCg=="
    }
  ]
}