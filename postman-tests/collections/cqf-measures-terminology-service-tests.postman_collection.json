{
	"info": {
		"_postman_id": "aa857301-c8cd-4781-8354-12585a8e8dfe",
		"name": "cqf-measures-terminology-service-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9369978"
	},
	"item": [
		{
			"name": "Library Operations",
			"item": [
				{
					"name": "POST Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Resource Type should be transaction-response\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Bundle\",\n    \"id\": \"POST-library-test\",\n    \"type\": \"transaction\",\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\": \"Library\",\n                \"id\": \"postLibraryTest\",\n                \"title\": \"Post Library Test\",\n                \"status\": \"draft\",\n                \"version\": \"0.0.1\",\n                \"url\": \"postLibraryTest\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                            \"code\": \"logic-library\",\n                            \"display\": \"Logic Library\"\n                        }\n                    ],\n                    \"text\": \"Test Logic Library\"\n                }\n            },\n      \"request\": {\n        \"method\": \"PUT\",\n            \"url\": \"Library/postLibraryTest\"\n      }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library",
							"host": [
								"{{SERVER_URL}}Library"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Library duplicating url and version",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Bundle\",\n    \"id\": \"POST-library-test-duplicate\",\n    \"type\": \"transaction\",\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\": \"Library\",\n                \"id\": \"postLibraryTest\",\n                \"title\": \"Post Library Test\",\n                \"status\": \"draft\",\n                \"version\": \"0.0.1\",\n                \"url\": \"postLibraryTest\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                            \"code\": \"logic-library\",\n                            \"display\": \"Logic Library\"\n                        }\n                    ],\n                    \"text\": \"Test Logic Library that should be rejected due to duplicate url and version\"\n                }\n            },\n      \"request\": {\n        \"method\": \"PUT\",\n            \"url\": \"Library/postLibraryTest\"\n      }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library",
							"host": [
								"{{SERVER_URL}}Library"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Resource Type should be transaction-response\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"draft\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library/postLibraryTest",
							"host": [
								"{{SERVER_URL}}Library"
							],
							"path": [
								"postLibraryTest"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Library draft to active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).equals(\"200\");",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Resource Type should be transaction-response\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status is active\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).equals(\"active\");",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"active\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library/postLibraryTest",
							"host": [
								"{{SERVER_URL}}Library"
							],
							"path": [
								"postLibraryTest"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Library test reject of update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is NOT 200\", function () {",
									"    pm.expect(pm.response.code).not.equals(\"200\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"active\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"test logic library should be rejected, because library is not in draft mode\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library/postLibraryTest",
							"host": [
								"{{SERVER_URL}}Library"
							],
							"path": [
								"postLibraryTest"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Library active to retired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).equals(\"200\");",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Resource Type should be transaction-response\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Status is retired\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).equals(\"retired\");",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"retired\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}Library/postLibraryTest",
							"host": [
								"{{SERVER_URL}}Library"
							],
							"path": [
								"postLibraryTest"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Library to server PASS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Resource Type should be transaction-response\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Bundle\",\n    \"id\": \"POST-library-test\",\n    \"type\": \"transaction\",\n    \"entry\": [\n        {\n            \"resource\": {\n                \"resourceType\": \"Library\",\n                \"id\": \"postLibraryTest\",\n                \"title\": \"Post Library Test\",\n                \"status\": \"draft\",\n                \"version\": \"0.0.1\",\n                \"url\": \"postLibraryTest\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                            \"code\": \"logic-library\",\n                            \"display\": \"Logic Library\"\n                        }\n                    ],\n                    \"text\": \"Test Logic Library\"\n                }\n            },\n            \"request\": {\n                \"method\": \"PUT\",\n                \"url\": \"Library/postLibraryTest\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://r4.smarthealthit.org",
							"protocol": "https",
							"host": [
								"r4",
								"smarthealthit",
								"org"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CapabilityStatement",
			"item": [
				{
					"name": "GET Capability Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Test that codeSystem is not empty\", function (){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.codeSystem).to.exist.and.to.not.be.empty;",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}metadata?mode=terminology",
							"host": [
								"{{SERVER_URL}}metadata"
							],
							"query": [
								{
									"key": "mode",
									"value": "terminology"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CodeSystem",
			"item": [
				{
					"name": "Profile",
					"item": [
						{
							"name": "Shareable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Resource url equal to request-intent\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/request-intent\");",
											"});",
											"",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.version).exist;",
											"});",
											"",
											"pm.test(\"Test that name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.status).exist;",
											"});",
											"",
											"pm.test(\"Experimental is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.experimental).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.publisher).exist;",
											"});",
											"",
											"pm.test(\"Description is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.description).exist;",
											"});",
											"",
											"pm.test(\"CaseSensitive is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.caseSensitive).exist;",
											"});",
											"",
											"pm.test(\"Content is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.content).exist;",
											"});",
											"",
											"pm.test(\"Concept is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.concept).exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/?url=http://hl7.org/fhir/request-intent&version=4.0.1",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://hl7.org/fhir/request-intent"
										},
										{
											"key": "version",
											"value": "4.0.1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SearchBy",
					"item": [
						{
							"name": "SHALL",
							"item": [
								{
									"name": "V3ActPriorityByUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://terminology.hl7.org/CodeSystem/v3-ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/CodeSystem/v3-ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"ResourceType is CodeSystem\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"CodeSystem\");",
													"",
													"});",
													"",
													"pm.test(\"Resource version is 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"2023-02-01\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?version=2023-02-01",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "version",
													"value": "2023-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource Date contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"    pm.expect(responseData.entry.find(m => m.resource.date === \"2023-02-01\"));",
													"",
													"//    pm.expect(responseData.entry[0].resource.date).contains(\"2023-02-01\");",
													"});",
													"",
													"pm.test(\"Resource identifier system is urn:ietf:rfc:3986\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.identifier[0].system).equals(\"urn:ietf:rfc:3986\");",
													"});",
													"",
													"pm.test(\"Resource identifier value is urn:oid:2.16.840.1.113883.5.7\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.identifier[0].value).equals(\"urn:oid:2.16.840.1.113883.5.7\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?identifier=urn:oid:2.16.840.1.113883.5.7",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "identifier",
													"value": "urn:oid:2.16.840.1.113883.5.7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ACTPriorityByName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?name=ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "name",
													"value": "ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByTitle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?title=ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "title",
													"value": "ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DataAbsentByReason",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/data-absent-reason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/data-absent-reason\");",
													"});",
													"",
													"pm.test(\"Resource version is 0.1.0\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"0.1.0\");",
													"});",
													"",
													"pm.test(\"Resource name is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"DataAbsentReason\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource caseSensitive is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).is.true;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept [0] is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0]).is.not.empty;",
													"});",
													"",
													"pm.test(\"Resource title is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"DataAbsentReason\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?description=Used%20to%20specify%20why%20the%20normally%20expected%20content%20of%20the%20data%20element%20is%20missing.",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "description",
													"value": "Used%20to%20specify%20why%20the%20normally%20expected%20content%20of%20the%20data%20element%20is%20missing."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DataAbsentReasonByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/data-absent-reason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/data-absent-reason\");",
													"});",
													"",
													"pm.test(\"Resource version is 0.1.0\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"0.1.0\");",
													"});",
													"",
													"pm.test(\"Resource name is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"DataAbsentReason\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource caseSensitive is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).is.true;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept [0] is not empty\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0]).is.not.empty;",
													"});",
													"",
													"pm.test(\"Resource title is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"DataAbsentReason\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?code=not-applicable",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "code",
													"value": "not-applicable"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SHOULD",
							"item": [
								{
									"name": "SearchByStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource Type is CodeSystem\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"CodeSystem\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?status=active",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "status",
													"value": "active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByValueSet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/ValueSet/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/ValueSet/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"ValueSet\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?ValueSet=http://terminology.hl7.org/ValueSet/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "ValueSet",
													"value": "http://terminology.hl7.org/ValueSet/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByMeasure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Measure\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Measure\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?Measure=http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "Measure",
													"value": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByLibrary",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Library\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Library\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?Library=http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "Library",
													"value": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByArtifact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Artifact\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Artifact\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?Artifact=http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "Artifact",
													"value": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Lookup",
					"item": [
						{
							"name": "V3ParticipationModelLookupByCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a value ParticipationMode\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"name\");",
											"    pm.expect(parameterEntry.valueString).to.equal(\"ParticipationMode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$lookup?system=http://terminology.hl7.org/CodeSystem/v3-ParticipationMode&code=ELECTRONIC",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$lookup"
									],
									"query": [
										{
											"key": "system",
											"value": "http://terminology.hl7.org/CodeSystem/v3-ParticipationMode"
										},
										{
											"key": "code",
											"value": "ELECTRONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "V3ParticipationModeLookupByCoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a value ParticipationMode\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"name\");",
											"    pm.expect(parameterEntry.valueString).to.equal(\"ParticipationMode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"coding\",\n    \"valueCoding\": {\n      \"code\": \"ELECTRONIC\",\n      \"system\": \"http://terminology.hl7.org/CodeSystem/v3-ParticipationMode\"\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$lookup",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$lookup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ValidateCode",
					"item": [
						{
							"name": "LivingArrangementValidateReturnedCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?system=http://terminology.hl7.org/CodeSystem/v3-LivingArrangement&version=2022-02&code=N",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "system",
											"value": "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"
										},
										{
											"key": "version",
											"value": "2022-02"
										},
										{
											"key": "code",
											"value": "N"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LivingArrangementValidateReturnedCoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"coding\",\n    \"valueCoding\": {\n      \"code\": \"N\",\n      \"system\": \"http://terminology.hl7.org/CodeSystem/v3-LivingArrangement\",\n      \"version\": \"2022-02\"\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "LivingArrangementValidateReturnedCodeableConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"codeableConcept\",\n    \"valueCodeableConcept\": {\n        \"coding\": [{\n          \"code\": \"N\",\n          \"system\": \"http://terminology.hl7.org/CodeSystem/v3-LivingArrangement\",\n          \"version\": \"2022-02\"\n        }]\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "QICoreValidateReturnedCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(277406006) is valid in code system SNOMEDCT\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of dosage\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Dosages (qualifier value)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?system=http://snomed.info/sct&version=http://snomed.info/sct/731000124108/version/20230301&code=277406006",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "system",
											"value": "http://snomed.info/sct"
										},
										{
											"key": "version",
											"value": "http://snomed.info/sct/731000124108/version/20230301"
										},
										{
											"key": "code",
											"value": "277406006"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FHIRValidateCodeNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of Unable to find code B in http://terminology.hl7.org/CodeSystem/v3-LivingArrangement version(2022-02)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Unable to find code B in http://terminology.hl7.org/CodeSystem/v3-LivingArrangement version(2022-02)\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?system=http://terminology.hl7.org/CodeSystem/v3-LivingArrangement&version=2022-02&code=B",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "system",
											"value": "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"
										},
										{
											"key": "version",
											"value": "2022-02"
										},
										{
											"key": "code",
											"value": "B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "THOValidateCodeNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});",
											"",
											"pm.test(\"Parameters contain a message Unable to find code N\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).contains(\"Unable to find code N\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?system=http://terminology.hl7.org/CodeSystem/v2-0092&version=2.1.0&code=N",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "system",
											"value": "http://terminology.hl7.org/CodeSystem/v2-0092"
										},
										{
											"key": "version",
											"value": "2.1.0"
										},
										{
											"key": "code",
											"value": "N"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ValueSet",
			"item": [
				{
					"name": "Profile",
					"item": [
						{
							"name": "Shareable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource url equal to request-intent\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/ValueSet/request-intent\");",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.status).exist;",
											"});",
											"",
											"pm.test(\"Experimental is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.experimental).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.publisher).exist;",
											"});",
											"",
											"pm.test(\"Description is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.description).exist;",
											"});",
											"",
											"pm.test(\"Shareable extension is present in meta\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/ValueSet/request-intent",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://hl7.org/fhir/ValueSet/request-intent"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publishable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.status).exist;",
											"});",
											"",
											"pm.test(\"Experimental is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.experimental).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.date).exist;",
											"});",
											"",
											"pm.test(\"Publishable extension is present in meta\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Executable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.status).exist;",
											"});",
											"",
											"pm.test(\"Experimental is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.experimental).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.date).exist;",
											"});",
											"",
											"pm.test(\"Executable extension is present in meta\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-executablevalueset\");",
											"});",
											"",
											"pm.test(\"expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.expansion).exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"ValueSet\",\n  \"id\": \"observation-category-laboratory\",\n  \"meta\": {\n    \"profile\": [\n      \"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-executablevalueset\"\n    ]\n  },\n  \"extension\": [\n    {\n      \"url\": \"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability\",\n      \"valueCode\": \"executable\"\n    },\n    {\n      \"url\": \"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeRepresentationLevel\",\n      \"valueCode\": \"executable\"\n    },\n    {\n      \"url\": \"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-usageWarning\",\n      \"valueString\": \"This value set contains a point-in-time expansion enumerating the codes that meet the value set intent. As new versions of the code systems used by the value set are released, the contents of this expansion will need to be updated to incorporate newly defined codes that meet the value set intent. Before, and periodically during production use, the value set expansion contents SHOULD be updated. The value set expansion specifies the timestamp when the expansion was produced, SHOULD contain the parameters used for the expansion, and SHALL contain the codes that are obtained by evaluating the value set definition. If this is ONLY an executable value set, a distributable definition of the value set must be obtained to compute the updated expansion.\"\n    }\n  ],\n  \"url\": \"http://fhir.org/guides/cdc/opioid-cds/ValueSet/observation-category-laboratory\",\n  \"name\": \"Valueset_observation-category-laboratory\",\n  \"version\": \"0.0.1\",\n  \"title\": \"ValueSet - Observation Category Laboratory\",\n  \"status\": \"active\",\n  \"experimental\": false,\n  \"publisher\": \"Alphora\",\n  \"description\": \"Laboratory Observation Category\",\n  \"expansion\": {\n    \"timestamp\": \"2021-06-08T13:47:55-07:00\",\n    \"contains\": [\n      {\n        \"system\": \"http://terminology.hl7.org/CodeSystem/observation-category\",\n        \"code\": \"laboratory\",\n        \"display\": \"Laboratory\"\n      }\n    ]\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/?url=",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Computable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.status).exist;",
											"});",
											"",
											"pm.test(\"Experimental is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.experimental).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.date).exist;",
											"});",
											"",
											"pm.test(\"Computable extension is present in meta\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-computablevalueset\");",
											"});",
											"",
											"pm.test(\"expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.entry[0].resource.expansion).exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/?url=",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Executable and Computable do not have complete urls. I could not find any through the system."
				},
				{
					"name": "SearchBy",
					"item": [
						{
							"name": "SHALL",
							"item": [
								{
									"name": "ByUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is 3 Mirror Goldmann exam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"3 Mirror Goldmann exam\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Version is 20170801\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"20170801\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1096.82&&version=20170801",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1096.82"
												},
												{
													"key": null,
													"value": null
												},
												{
													"key": "version",
													"value": "20170801"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Name is (Inactive) Interventions Related to Medication Management, Medication Action Plan\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"(Inactive) Interventions Related to Medication Management, Medication Action Plan\");",
													"});",
													"",
													"pm.test(\"Publisher is PharmacyHIT\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"PharmacyHIT\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?identifier=urn:oid:2.16.840.1.113762.1.4.1096.82",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "identifier",
													"value": "urn:oid:2.16.840.1.113762.1.4.1096.82"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is 3 Mirror Goldmann exam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"3 Mirror Goldmann exam\");",
													"});",
													"",
													"pm.test(\"url is http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\");",
													"});",
													"",
													"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?name=3 Mirror Goldmann exam",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "name",
													"value": "3 Mirror Goldmann exam"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByTitle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"name is ACEis and ARBs\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ACEis and ARBs\");",
													"});",
													"",
													"pm.test(\"resourceType is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"id is 2.16.840.1.113762.1.4.1213.11-20190917\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.id).equals(\"2.16.840.1.113762.1.4.1213.11-20190917\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?title=ACEis and ARBs",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "title",
													"value": "ACEis and ARBs"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Total is greater than 0\", function () {",
													"        const responseData = pm.response.json();",
													"// ",
													"    pm.expect(responseData.total).is.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?status=draft",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "status",
													"value": "draft"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"name is ACE Inhibitor or ARB or ARNI Ingredient\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ACE Inhibitor or ARB or ARNI Ingredient\");",
													"});",
													"",
													"pm.test(\"resourceType is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"id is 2.16.840.1.113883.3.526.3.1489-20230217\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.id).equals(\"2.16.840.1.113883.3.526.3.1489-20230217\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?description=Value%20Set%20Title%20Changed%20--%20from%20Allergen%20to%20Ingredient%20--%20to%20reflect%20true%20value%20set%20content.",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "description",
													"value": "Value%20Set%20Title%20Changed%20--%20from%20Allergen%20to%20Ingredient%20--%20to%20reflect%20true%20value%20set%20content."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is 3 Mirror Goldmann exam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"3 Mirror Goldmann exam\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?code=420523002",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "code",
													"value": "420523002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"\", function () {",
													"    const responseData = pm.response.json();",
													"    const extensionEntry = responseData.extension.find(m => m.url === \"http://hl7.org/fhir/StructureDefinition/valueset-keyWord\");",
													"    pm.expect(extensionEntry.valueString).to.equal(\"PC-01\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?valueset-keyWord=PC-01",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "valueset-keyWord",
													"value": "PC-01"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ValidateCode",
					"item": [
						{
							"name": "ValidateByUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"/*",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"*/",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateByVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n        \"name\": \"valueSetVersion\",\n        \"valueString\": \"20200319\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateByActiveOnly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});",
											"",
											"pm.test(\"inactive contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"inactive\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n    \"name\" : \"activeOnly\",\n    \"valueString\" : \"true\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateWithDisplayLanguage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"url\",\n            \"valueString\": \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n        },\n        {\n            \"name\": \"displayLanguage\",\n            \"valueString\": \"english\"\n        },\n        {\n            \"name\": \"code\",\n            \"valueString\": \"420523002\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateCodeWithCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"valueset\",\n            \"resource\": {\n                \"resourceType\": \"ValueSet\",\n                \"id\": \"2.16.840.1.113762.1.4.1047.611-20200319\",\n                \"meta\": {\n                    \"versionId\": \"8\",\n                    \"lastUpdated\": \"2020-06-30T19:27:46.000-04:00\",\n                    \"profile\": [\n                        \"http://hl7.org/fhir/StructureDefinition/shareablevalueset\",\n                        \"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\"\n                    ],\n                    \"tag\": [\n                        {\n                            \"code\": \"SUBSETTED\",\n                            \"display\": \"subsetted\"\n                        }\n                    ]\n                },\n                \"extension\": [\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/valueset-author\",\n                        \"valueString\": \"ASRS Quality Measure Development Author\"\n                    },\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate\",\n                        \"valueDate\": \"2022-12-15\"\n                    },\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate\",\n                        \"valueDate\": \"2020-06-30\"\n                    }\n                ],\n                \"url\": \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\",\n                \"identifier\": [\n                    {\n                        \"system\": \"urn:ietf:rfc:3986\",\n                        \"value\": \"urn:oid:2.16.840.1.113762.1.4.1047.611\"\n                    }\n                ],\n                \"version\": \"20200319\",\n                \"name\": \"3 Mirror Goldmann exam\",\n                \"title\": \"3 Mirror Goldmann exam\",\n                \"status\": \"active\",\n                \"experimental\": false,\n                \"date\": \"2020-03-19T01:00:18-04:00\",\n                \"publisher\": \"ASRS Quality Measure Development Steward\",\n                \"jurisdiction\": [\n                    {\n                        \"extension\": [\n                            {\n                                \"url\": \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\",\n                                \"valueString\": \"UNKNOWN\"\n                            }\n                        ]\n                    }\n                ],\n                \"purpose\": \"(Clinical Focus: The intent of this set of values is to capture that an eye exam was performed using Goldman contact lens procedure.),(Data Element Scope: Method or attribute related to procedure performed.),(Inclusion Criteria: The 3 mirror Goldman contact lens is included.),(Exclusion Criteria: All other values that do not meet inclusion criteria are excluded.)\"\n            }\n        },\n        {\n            \"name\": \"code\",\n            \"valueString\": \"420523002\"\n        },\n        {\n            \"name\": \"displayLanguage\",\n            \"valueString\": \"english\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateCodeWithSystem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    },\n    {\n      \"name\" : \"system\",\n      \"valueString\" : \"urn:oid:2.16.840.1.113762.1.4.1047.611\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Expand",
					"item": [
						{
							"name": "ExpandWithUri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{basicPass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{basicUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithValuesetVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"valueSetVersion\",\n       \"valueString\": \"4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithActiveOnly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"activeOnly\",\n       \"valueString\": \"true\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithDisplayLanguage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"displayLanguage\",\n       \"valueString\": \"english\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithLimitedExpansion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"limitedExpansion\",\n     \"valueBoolean\": \"true\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithDefaultToLatestVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"defaultToLatestVersion\",\n     \"valueBoolean\": \"true\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithSystemVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithCheckSystemVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"check-system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithForceSystemVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"force-system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithCanonicalVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"canonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithCheckCanonicalVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"checkCanonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithForceCanonoicalVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Test that version is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.version).exist;",
											"});",
											"",
											"pm.test(\"Name is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).exist;",
											"});",
											"",
											"pm.test(\"Status is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).exist;",
											"});",
											"",
											"pm.test(\"Publisher is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.publisher).exist;",
											"});",
											"",
											"pm.test(\"Title is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.title).exist;",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.date).exist;",
											"});",
											"",
											"pm.test(\"Expansion is present\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.expansion).exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"forceCanonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET CodeSystem test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Resource Type should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Test that id is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"url is http://terminology.hl7.org/CodeSystem/v3-ActCode\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.url).to.equal(\"http://terminology.hl7.org/CodeSystem/v3-ActCode\", \"Invalid url\");",
							"});",
							"",
							"pm.test(\"Title is ActCode\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.title).to.equal(\"ActCode\", \"Title error\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER_URL}}CodeSystem/ActCode",
					"host": [
						"{{SERVER_URL}}CodeSystem"
					],
					"path": [
						"ActCode"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{basicPass}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{basicUser}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
