{
	"info": {
		"_postman_id": "8cc76755-a8fa-4981-944a-e1f27b91dd38",
		"name": "cqf-measures-terminology-service-tests",
		"description": "This test suite validates capability described in the Quality Measure IG Measure Terminology Service:\n\n[https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html)\n\nSpecifically, there are test case folders for each section of the capability statement:\n\n- Code Systems (10.1.2: [https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#code-systems](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#code-systems))\n    \n- Value Sets (10.1.3: [https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#value-sets](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#value-sets))\n    \n- Quality Programs (10.1.4: [https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#quality-programs-artifact-collections](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#quality-programs-artifact-collections))\n    \n- Server Operations (10.1.5: [https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#server-operations](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#server-operations))\n    \n- Capability Statement (10.1.6: [https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#capability-statement](https://build.fhir.org/ig/HL7/cqf-measures/measure-terminology-service.html#capability-statement))\n    \n\nTests are named according to the requirement that they are testing. More documentation is available in the testing folders and individual test cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "269238"
	},
	"item": [
		{
			"name": "CodeSystem",
			"item": [
				{
					"name": "Representation",
					"item": [
						{
							"name": "Shareable",
							"item": [
								{
									"name": "Shareable (Ballot-bound)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on FHIR R4 source of truth: https://hl7.org/fhir/R4/codesystem-request-intent.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"Resource url equal to request-intent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/request-intent\");",
													"});",
													"",
													"",
													"pm.test(\"Version is 4.0.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.0.1\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Name is RequestIntent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"RequestIntent\", \"Name error\");",
													"});",
													"",
													"pm.test(\"Publisher is HL7 (FHIR Project)\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"HL7 (FHIR Project)\", \"Publisher error\");",
													"});",
													"",
													"pm.test(\"Title is RequestIntent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RequestIntent\", \"Title error\");",
													"});",
													"",
													"pm.test(\"Status is draft\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"draft\", \"Status error\");",
													"});",
													"",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"Codes indicating the degree of authority/intentionality associated with a request.\", \"Description error\");",
													"});",
													"",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"pm.test(\"Content is complete\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).to.equal(\"complete\", \"Content error\");",
													"});",
													"",
													"pm.test(\"Concept is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem?url=http://hl7.org/fhir/request-intent&version=4.0.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/request-intent"
												},
												{
													"key": "version",
													"value": "4.0.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (THO)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://terminology.hl7.org/3.1.0/CodeSystem-v3-ActCode.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"url is http://terminology.hl7.org/CodeSystem/v3-ActCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource).to.be.an('object');",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://terminology.hl7.org/CodeSystem/v3-ActCode\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 6.1.0\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource).to.be.an('object');",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"6.1.0\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Name is ActCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"ActCode\", \"Name error\");",
													"});",
													"",
													"pm.test(\"Publisher is Health Level 7\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"Health Level 7\", \"Publisher error\");",
													"});",
													"",
													"pm.test(\"Title is ActCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"ActCode\", \"Title error\");",
													"});",
													"",
													"pm.test(\"Status is active\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"active\", \"Status error\");",
													"});",
													"",
													"// NOTE: Experimental is expected by the profile but not present in the HL7 source-of-truth (https://terminology.hl7.org/3.1.0/CodeSystem-v3-ActCode.json)",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"A code specifying the particular kind of Act that the Act-instance represents within its class.\\r\\n\\r\\n*Constraints:* The kind of Act (e.g. physical examination, serum potassium, inpatient encounter, charge financial transaction, etc.) is specified with a code from one of several, typically external, coding systems. The coding system will depend on the class of Act, such as LOINC for observations, etc.\\r\\n\\r\\nConceptually, the Act.code must be a specialization of the Act.classCode. This is why the structure of ActClass domain should be reflected in the superstructure of the ActCode domain and then individual codes or externally referenced vocabularies subordinated under these domains that reflect the ActClass structure.\\r\\n\\r\\nAct.classCode and Act.code are not modifiers of each other but the Act.code concept should really imply the Act.classCode concept. For a negative example, it is not appropriate to use an Act.code \\\"potassium\\\" together with and Act.classCode for \\\"laboratory observation\\\" to somehow mean \\\"potassium laboratory observation\\\" and then use the same Act.code for \\\"potassium\\\" together with Act.classCode for \\\"medication\\\" to mean \\\"substitution of potassium\\\". This mutually modifying use of Act.code and Act.classCode is not permitted.\", \"Description error\");",
													"});",
													"",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"pm.test(\"HierarchyMeaning is is-a\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.hierarchyMeaning).to.equal(\"is-a\", \"HierarchyMeaning error\");",
													"});",
													"",
													"pm.test(\"Content is complete\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).to.equal(\"complete\", \"Content error\");",
													"});",
													"",
													"pm.test(\"Concept is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem?url=http://terminology.hl7.org/CodeSystem/v3-ActCode&version=6.1.0",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/CodeSystem/v3-ActCode"
												},
												{
													"key": "version",
													"value": "6.1.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (USCore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source-of-truth https://hl7.org/fhir/us/core/STU3.1.1/CodeSystem-condition-category.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"http://hl7.org/fhir/us/core/CodeSystem/condition-category\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://hl7.org/fhir/us/core/CodeSystem/condition-category\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 3.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"3.1.1\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Name is USCoreConditionCategoryExtensionCodes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"USCoreConditionCategoryExtensionCodes\", \"Name error\");",
													"});",
													"",
													"pm.test(\"Publisher is HL7 US Realm Steering Committee\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"HL7 US Realm Steering Committee\", \"Publisher error\");",
													"});",
													"",
													"pm.test(\"Title is US Core Condition Category Extension Codes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"US Core Condition Category Extension Codes\", \"Title error\");",
													"});",
													"",
													"pm.test(\"Status is active\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"active\", \"Status error\");",
													"});",
													"",
													"// NOTE: Experimental is expected by the profile but not present in the HL7 source-of-truth",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"Set of codes that are needed for implementation of the US-Core profiles. These codes are used as extensions to the FHIR and US Core value sets.\\n\");",
													"});",
													"",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"pm.test(\"Content is complete\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).to.equal(\"complete\", \"Content error\");",
													"});",
													"",
													"pm.test(\"Concept is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem?url=http://hl7.org/fhir/us/core/CodeSystem/condition-category&version=3.1.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/core/CodeSystem/condition-category"
												},
												{
													"key": "version",
													"value": "3.1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (QICore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source-of-truth https://hl7.org/fhir/us/qicore/STU4.1.1/CodeSystem-appropriateness-score.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"Url is http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 4.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.1.1\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Name is AppropriatenessScore\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"AppropriatenessScore\", \"Name error\");",
													"});",
													"",
													"pm.test(\"Publisher is http://www.hl7.org/Special/committees/cqi/index.cfm\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"http://www.hl7.org/Special/committees/cqi/index.cfm\", \"Publisher error\");",
													"});",
													"",
													"pm.test(\"Title is RAND Appropriateness Score Codes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RAND Appropriateness Score Codes\", \"Title error\");",
													"});",
													"",
													"pm.test(\"Status is draft\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"draft\", \"Status error\");",
													"});",
													"",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"The RAND scoring for appropriateness of the procedure.\");",
													"});",
													"",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"pm.test(\"Content is complete\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).to.equal(\"complete\", \"Content error\");",
													"});",
													"",
													"pm.test(\"Concept is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem?url=http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score&version=4.1.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score"
												},
												{
													"key": "version",
													"value": "4.1.1"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate Shareable CodeSystem content for 4 categories of CodeSystem:\n\n- FHIR Ballot-bound (published as part of the FHIR specification)\n    \n- THO (published in Terminology.HL7.org\n    \n- US Core (published in the US Core Implementation Guide)\n    \n- QI Core (published in the QI Core Implementation Guide)\n    \n\nEach test validates the content expected by the ShareableCodeSystem profile:\n\nShareableCodeSystem Required Items:\n\n- url\n    \n- version\n    \n- title\n    \n- status\n    \n- experimental\n    \n- description\n    \n- caseSensitive\n    \n\nShareableCodeSystem Optional/MS Items:\n\n- name\n    \n- publisher\n    \n- hierarchyMeaning\n    \n- content\n    \n- concept"
						},
						{
							"name": "Publishable",
							"item": [
								{
									"name": "Publishable (Ballot-bound)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on FHIR R4 source of truth: https://hl7.org/fhir/R4/codesystem-request-intent.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to request-intent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/request-intent\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 4.0.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.0.1\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is RequestIntent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RequestIntent\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2019-11-01T09:29:23+11:00\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2019-11-01T09:29:23+11:00\", \"Date error\");",
													"});",
													"",
													"// caseSensitive",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastRevieDate",
													"// author",
													"// keyword",
													"// sourceReference",
													"// useContext",
													"// jurisdiction",
													"// copyright",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem?url=http://hl7.org/fhir/request-intent&version=4.0.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/request-intent"
												},
												{
													"key": "version",
													"value": "4.0.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (THO)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://terminology.hl7.org/3.1.0/CodeSystem-v3-ActCode.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"url is http://terminology.hl7.org/CodeSystem/v3-ActCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://terminology.hl7.org/CodeSystem/v3-ActCode\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 6.1.0\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"6.1.0\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Title is ActCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"ActCode\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2019-12-15\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2019-12-15\", \"Date error\");",
													"});",
													"",
													"// caseSensitive",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastRevieDate",
													"// author",
													"// keyword",
													"// sourceReference",
													"// useContext",
													"// jurisdiction",
													"// copyright",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://terminology.hl7.org/CodeSystem/v3-ActCode&version=6.1.0",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/CodeSystem/v3-ActCode"
												},
												{
													"key": "version",
													"value": "6.1.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (USCore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source-of-truth https://hl7.org/fhir/us/core/STU3.1.1/CodeSystem-condition-category.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"http://hl7.org/fhir/us/core/CodeSystem/condition-category\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://hl7.org/fhir/us/core/CodeSystem/condition-category\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 3.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"3.1.1\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Title is US Core Condition Category Extension Codes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"US Core Condition Category Extension Codes\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2020-08-28T10:54:27+10:00\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2020-08-28T10:54:27+10:00\", \"Date error\");",
													"});",
													"",
													"// caseSensitive",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastRevieDate",
													"// author",
													"// keyword",
													"// sourceReference",
													"// useContext",
													"// jurisdiction",
													"pm.test(\"jurisdiction is US\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    const jurisdiction = responseData.entry[0].resource.jurisdiction[0].coding[0];",
													"    pm.expect(jurisdiction.system).to.equal(\"urn:iso:std:iso:3166\", \"Jurisdiction.system error\");",
													"    pm.expect(jurisdiction.code).to.equal(\"US\", \"Jurisdiction.code error\");",
													"    pm.expect(jurisdiction.display).to.equal(\"United States of America\", \"Jurisdiction.display error\");",
													"});",
													"",
													"// copyright",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://hl7.org/fhir/us/core/CodeSystem/condition-category&version=3.1.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/core/CodeSystem/condition-category"
												},
												{
													"key": "version",
													"value": "3.1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (QICore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source-of-truth https://hl7.org/fhir/us/qicore/STU4.1.1/CodeSystem-appropriateness-score.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equal(1);",
													"});",
													"",
													"pm.test(\"Url is http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).to.equal(\"http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score\", \"Invalid url\");",
													"});",
													"",
													"pm.test(\"Version is 4.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.1.1\", \"Invalid version\");",
													"});",
													"",
													"pm.test(\"Title is RAND Appropriateness Score Codes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RAND Appropriateness Score Codes\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2018-08-22\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2018-08-22\", \"Date error\");",
													"});",
													"",
													"// caseSensitive",
													"pm.test(\"CaseSensitive is true\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).to.equal(true, \"CaseSensitive error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastRevieDate",
													"// author",
													"// keyword",
													"// sourceReference",
													"// useContext",
													"// jurisdiction",
													"pm.test(\"jurisdiction is US\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    const jurisdiction = responseData.entry[0].resource.jurisdiction[0].coding[0];",
													"    pm.expect(jurisdiction.system).to.equal(\"urn:iso:std:iso:3166\", \"Jurisdiction.system error\");",
													"    pm.expect(jurisdiction.code).to.equal(\"US\", \"Jurisdiction.code error\");",
													"    //pm.expect(jurisdiction.display).to.equal(\"United States of America\", \"Jurisdiction.display error\");",
													"});",
													"",
													"// copyright",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score&version=4.1.1",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/qicore/CodeSystem/appropriateness-score"
												},
												{
													"key": "version",
													"value": "4.1.1"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate Publishable CodeSystem content for 4 categories of CodeSystem:\n\n- FHIR Ballot-bound (published as part of the FHIR specification)\n    \n- THO (published in Terminology.HL7.org\n    \n- US Core (published in the US Core Implementation Guide)\n    \n- QI Core (published in the QI Core Implementation Guide)\n    \n\nEach test validates the content expected by the CQFMPublishableCodeSystem profile:\n\nCQFMPublishableCodeSystem Required Items:\n\n- title\n    \n- date\n    \n- caseSensitive\n    \n\nCQFMPublishableCodeSystem Optional/MS Items:\n\n- approvalDate\n    \n- effectiveDate\n    \n- expirationDate\n    \n- lastReviewDate\n    \n- author\n    \n- keyword\n    \n- sourceReference\n    \n- useContext\n    \n- jurisdiction\n    \n- copyright"
						}
					]
				},
				{
					"name": "SearchBy",
					"item": [
						{
							"name": "SHALL",
							"item": [
								{
									"name": "V3ActPriorityByUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://terminology.hl7.org/CodeSystem/v3-ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/CodeSystem/v3-ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"ResourceType is CodeSystem\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"CodeSystem\");",
													"",
													"});",
													"",
													"pm.test(\"Resource version is 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"2023-02-01\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?url=http://terminology.hl7.org/CodeSystem/v3-ActPriority&version=2023-02-01",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/CodeSystem/v3-ActPriority"
												},
												{
													"key": "version",
													"value": "2023-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource Date contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"    pm.expect(responseData.entry.find(m => m.resource.date === \"2023-02-01\"));",
													"",
													"//    pm.expect(responseData.entry[0].resource.date).contains(\"2023-02-01\");",
													"});",
													"",
													"pm.test(\"Resource identifier system is urn:ietf:rfc:3986\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.identifier[0].system).equals(\"urn:ietf:rfc:3986\");",
													"});",
													"",
													"pm.test(\"Resource identifier value is urn:oid:2.16.840.1.113883.5.7\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.identifier[0].value).equals(\"urn:oid:2.16.840.1.113883.5.7\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?identifier=urn:oid:2.16.840.1.113883.5.7",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "identifier",
													"value": "urn:oid:2.16.840.1.113883.5.7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?name=ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "name",
													"value": "ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "V3ActPriorityByTitle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/v3-ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/v3-ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource version contains 2023-02-01\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry.find(m => m.resource.version === \"2023-02-01\"));",
													"});",
													"",
													"pm.test(\"Resource name is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ActPriority\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept code is A\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0].code).equals(\"A\");",
													"});",
													"",
													"pm.test(\"Resource title is ActPriority\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"ActPriority\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?title=ActPriority",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "title",
													"value": "ActPriority"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DataAbsentByReason",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/data-absent-reason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/data-absent-reason\");",
													"});",
													"",
													"pm.test(\"Resource version is 0.1.0\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"0.1.0\");",
													"});",
													"",
													"pm.test(\"Resource name is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"DataAbsentReason\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource caseSensitive is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).is.true;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept [0] is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0]).is.not.empty;",
													"});",
													"",
													"pm.test(\"Resource title is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"DataAbsentReason\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?description=Used%20to%20specify%20why%20the%20normally%20expected%20content%20of%20the%20data%20element%20is%20missing.",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "description",
													"value": "Used%20to%20specify%20why%20the%20normally%20expected%20content%20of%20the%20data%20element%20is%20missing."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DataAbsentReasonByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/data-absent-reason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/data-absent-reason\");",
													"});",
													"",
													"pm.test(\"Resource version is 0.1.0\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).contains(\"0.1.0\");",
													"});",
													"",
													"pm.test(\"Resource name is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"DataAbsentReason\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource caseSensitive is true\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.caseSensitive).is.true;",
													"});",
													"",
													"pm.test(\"Resource content is complete\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.content).equals(\"complete\");",
													"});",
													"",
													"pm.test(\"Resource concept [0] is not empty\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.concept[0]).is.not.empty;",
													"});",
													"",
													"pm.test(\"Resource title is DataAbsentReason\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"DataAbsentReason\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?code=not-applicable",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "code",
													"value": "not-applicable"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SHOULD",
							"item": [
								{
									"name": "SearchByStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource Type is CodeSystem\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"CodeSystem\");",
													"});",
													"",
													"pm.test(\"Resource status is active\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"active\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?status=active",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "status",
													"value": "active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByValueSet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/ValueSet/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/ValueSet/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"ValueSet\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?valueset=http://terminology.hl7.org/ValueSet/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "valueset",
													"value": "http://terminology.hl7.org/ValueSet/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByMeasure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Measure\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Measure\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?measure=https://madie.cms.gov/Measure/HFBetaBlockerTherapyforLVSDFHIR",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "measure",
													"value": "https://madie.cms.gov/Measure/HFBetaBlockerTherapyforLVSDFHIR"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByLibrary",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Library\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Library\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?library=http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "library",
													"value": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FHIRAllergyIntoleranceByArtifact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource url is http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\");",
													"});",
													"",
													"pm.test(\"Resource version is 4.0.1\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"4.0.1\");",
													"});",
													"",
													"pm.test(\"Resource name is AllergyIntoleranceClinicalStatusCodes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"AllergyIntoleranceClinicalStatusCodes\");",
													"});",
													"",
													"pm.test(\"Resource status is draft\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).equals(\"draft\");",
													"});",
													"",
													"pm.test(\"Resource experimental is false\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).is.false;",
													"});",
													"",
													"pm.test(\"Resource publisher is FHIR Project team\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"FHIR Project team\");",
													"});",
													"",
													"pm.test(\"Resource title is AllergyIntolerance Clinical Status Codes\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).equals(\"AllergyIntolerance Clinical Status Codes\");",
													"});",
													"",
													"pm.test(\"Resource type is Artifact\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.type).equals(\"Artifact\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}CodeSystem/?artifact=http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
											"host": [
												"{{SERVER_URL}}CodeSystem"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "artifact",
													"value": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Lookup",
					"item": [
						{
							"name": "V3ParticipationModelLookupByCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a value ParticipationMode\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"name\");",
											"    pm.expect(parameterEntry.valueString).to.equal(\"ParticipationMode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$lookup?system=http://terminology.hl7.org/CodeSystem/v3-ParticipationMode&code=ELECTRONIC",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$lookup"
									],
									"query": [
										{
											"key": "system",
											"value": "http://terminology.hl7.org/CodeSystem/v3-ParticipationMode"
										},
										{
											"key": "code",
											"value": "ELECTRONIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "V3ParticipationModeLookupByCoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a value ParticipationMode\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"name\");",
											"    pm.expect(parameterEntry.valueString).to.equal(\"ParticipationMode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"coding\",\n    \"valueCoding\": {\n      \"code\": \"ELECTRONIC\",\n      \"system\": \"http://terminology.hl7.org/CodeSystem/v3-ParticipationMode\"\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$lookup",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$lookup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ValidateCode",
					"item": [
						{
							"name": "LivingArrangementValidateReturnedCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?url=http://terminology.hl7.org/CodeSystem/v3-LivingArrangement&version=2022-02&code=N",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "url",
											"value": "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"
										},
										{
											"key": "version",
											"value": "2022-02"
										},
										{
											"key": "code",
											"value": "N"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LivingArrangementValidateReturnedCoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({key: 'Content-Type', value: 'application/fhir+json' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"coding\",\n    \"valueCoding\": {\n      \"code\": \"N\",\n      \"system\": \"http://terminology.hl7.org/CodeSystem/v3-LivingArrangement\",\n      \"version\": \"2022-02\"\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "LivingArrangementValidateReturnedCodeableConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Nursing Home\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Nursing Home\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({key: 'Content-Type', value: 'application/fhir+json' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"codeableConcept\",\n    \"valueCodeableConcept\": {\n        \"coding\": [{\n          \"code\": \"N\",\n          \"system\": \"http://terminology.hl7.org/CodeSystem/v3-LivingArrangement\",\n          \"version\": \"2022-02\"\n        }, {\n            \"code\": \"365508006\",\n            \"system\": \"http://snomed.info/sct\",\n            \"display\": \"Finding of residence and accommodation circumstances (finding)\"\n        }]\n    }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "QICoreValidateReturnedCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(277406006) is valid in code system SNOMEDCT\");",
											"});",
											"",
											"pm.test(\"Parameters contain a display of dosage\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Dosages (qualifier value)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?url=http://snomed.info/sct&version=http://snomed.info/sct/731000124108/version/20230301&code=277406006",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "url",
											"value": "http://snomed.info/sct"
										},
										{
											"key": "version",
											"value": "http://snomed.info/sct/731000124108/version/20230301"
										},
										{
											"key": "code",
											"value": "277406006"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FHIRValidateCodeNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});",
											"",
											"pm.test(\"Parameters contain a message of Unable to find code B in http://terminology.hl7.org/CodeSystem/v3-LivingArrangement version(2022-02)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Unable to find code B in http://terminology.hl7.org/CodeSystem/v3-LivingArrangement version(2022-02)\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?url=http://terminology.hl7.org/CodeSystem/v3-LivingArrangement&version=2022-02&code=B",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "url",
											"value": "http://terminology.hl7.org/CodeSystem/v3-LivingArrangement"
										},
										{
											"key": "version",
											"value": "2022-02"
										},
										{
											"key": "code",
											"value": "B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "THOValidateCodeNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});",
											"",
											"pm.test(\"Parameters contain a message Unable to find code N\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).contains(\"Unable to find code N\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}CodeSystem/$validate-code?url=http://terminology.hl7.org/CodeSystem/v2-0092&version=2.1.0&code=N",
									"host": [
										"{{SERVER_URL}}CodeSystem"
									],
									"path": [
										"$validate-code"
									],
									"query": [
										{
											"key": "url",
											"value": "http://terminology.hl7.org/CodeSystem/v2-0092"
										},
										{
											"key": "version",
											"value": "2.1.0"
										},
										{
											"key": "code",
											"value": "N"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ValueSet",
			"item": [
				{
					"name": "Representation",
					"item": [
						{
							"name": "Shareable",
							"item": [
								{
									"name": "Shareable (Ballot-bound)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/R4/valueset-request-intent.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"pm.test(\"Shareable profile is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to request-intent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/ValueSet/request-intent\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 4.0.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.0.1\", \"Invalid version\");",
													"});",
													"",
													"// name",
													"pm.test(\"Name is RequestIntent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"RequestIntent\", \"Name error\");",
													"});",
													"",
													"// status",
													"pm.test(\"Status is draft\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"draft\", \"Status error\");",
													"});",
													"",
													"// experimental",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"// publisher",
													"pm.test(\"Publisher is HL7 (FHIR Project)\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"HL7 (FHIR Project)\", \"Publisher error\");",
													"});",
													"",
													"// description",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"Codes indicating the degree of authority/intentionality associated with a request.\", \"Description error\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/ValueSet/request-intent&version=4.0.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/ValueSet/request-intent"
												},
												{
													"key": "version",
													"value": "4.0.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (THO)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://terminology.hl7.org/3.1.0/ValueSet-v3-ActEncounterCode.json",
													"// NOTE: Hosted content is actually based on FHIR for this THO value set...",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"pm.test(\"Shareable profile is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url is http://terminology.hl7.org/ValueSet/v3-ActEncounterCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://terminology.hl7.org/ValueSet/v3-ActEncounterCode\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 2.0.0\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"2.0.0\", \"Invalid version\");",
													"});",
													"",
													"// name",
													"pm.test(\"Name is ActEncounterCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"ActEncounterCode\", \"Name error\");",
													"});",
													"",
													"// status",
													"pm.test(\"Status is active\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"active\", \"Status error\");",
													"});",
													"",
													"// experimental ",
													"// Not present in the source of truth",
													"//pm.test(\"Experimental is false\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"//});",
													"",
													"// publisher",
													"// Not present in source of truth",
													"//pm.test(\"Publisher is HL7 (FHIR Project)\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"HL7 (FHIR Project)\", \"Publisher error\");",
													"//});",
													"",
													"// description",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"Domain provides codes that qualify the ActEncounterClass (ENC)\", \"Description error\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://terminology.hl7.org/ValueSet/v3-ActEncounterCode&version=2014-03-26",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/ValueSet/v3-ActEncounterCode"
												},
												{
													"key": "version",
													"value": "2014-03-26"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (USCore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/us/core/STU3.1.1/ValueSet-us-core-condition-category.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"// Not present in source of truth",
													"//pm.test(\"Shareable profile is present in meta\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
													"//});",
													"",
													"// url",
													"pm.test(\"Resource url is http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 3.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"3.1.1\", \"Invalid version\");",
													"});",
													"",
													"// name",
													"pm.test(\"Name is USCoreConditionCategoryCodes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"USCoreConditionCategoryCodes\", \"Name error\");",
													"});",
													"",
													"// status",
													"pm.test(\"Status is active\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"active\", \"Status error\");",
													"});",
													"",
													"// experimental",
													"// Not present in source of truth",
													"//pm.test(\"Experimental is false\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"//});",
													"",
													"// publisher",
													"pm.test(\"Publisher is HL7 US Realm Steering Committee\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"HL7 US Realm Steering Committee\", \"Publisher error\");",
													"});",
													"",
													"// description",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"The US Core Condition Category Codes support the separate concepts of problems and health concerns in Condition.category in order for API consumers to be able to separate health concerns and problems. However this is not mandatory for 2015 certification\", \"Description error\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category&version=3.1.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
												},
												{
													"key": "version",
													"value": "3.1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Shareable (QICore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/us/qicore/STU4.1.1/ValueSet-qicore-appropriateness-score.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"pm.test(\"Shareable profile is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url is http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 4.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.1.1\", \"Invalid version\");",
													"});",
													"",
													"// name",
													"pm.test(\"Name is QICoreAppropriatenessScore\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"QICoreAppropriatenessScore\", \"Name error\");",
													"});",
													"",
													"// status",
													"pm.test(\"Status is draft\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.status).to.equal(\"draft\", \"Status error\");",
													"});",
													"",
													"// experimental",
													"pm.test(\"Experimental is false\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.experimental).to.equal(false, \"Experimental error\");",
													"});",
													"",
													"// publisher",
													"pm.test(\"Publisher is http://www.hl7.org/Special/committees/cqi/index.cfm\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).to.equal(\"http://www.hl7.org/Special/committees/cqi/index.cfm\", \"Publisher error\");",
													"});",
													"",
													"// description",
													"pm.test(\"Description is expected\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.description).to.equal(\"The RAND scoring for appropriateness of the procedure.\", \"Description error\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score&version=4.1.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score"
												},
												{
													"key": "version",
													"value": "4.1.1"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate Shareable ValueSet content for 4 categories of ValueSet:  \nFHIR Ballot-bound (published as part of the FHIR specification)  \nTHO (published in Terminology.HL7.org  \nUS Core (published in the US Core Implementation Guide)  \nQI Core (published in the QI Core Implementation Guide)\n\nEach test validates the content expected by the R4 ShareableValueSet profile:  \nShareableValueSet Required Items:\n\n- url\n    \n- version\n    \n- name\n    \n- status\n    \n- experimental\n    \n- publisher\n    \n- description"
						},
						{
							"name": "Publishable",
							"item": [
								{
									"name": "Publishable (Ballot-bound)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/R4/valueset-request-intent.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"pm.test(\"Publishable profile is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to request-intent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/ValueSet/request-intent\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 4.0.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.0.1\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is RequestIntent\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RequestIntent\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2019-11-01T09:29:23+11:00\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2019-11-01T09:29:23+11:00\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastReviewDate",
													"// author",
													"// keyWord",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/ValueSet/request-intent&version=4.0.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/ValueSet/request-intent"
												},
												{
													"key": "version",
													"value": "4.0.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (THO)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://terminology.hl7.org/3.1.0/ValueSet-v3-ActEncounterCode.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"// Not present in source of truth",
													"//pm.test(\"Publishable profile is present in meta\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
													"//});",
													"",
													"// url",
													"pm.test(\"Resource url is http://terminology.hl7.org/ValueSet/v3-ActEncounterCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://terminology.hl7.org/ValueSet/v3-ActEncounterCode\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 2.0.0\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"2.0.0\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is ActEncounterCode\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"ActEncounterCode\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2014-03-26\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2014-03-26\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastReviewDate",
													"// author",
													"// keyWord",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://terminology.hl7.org/ValueSet/v3-ActEncounterCode&version=2014-03-26",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://terminology.hl7.org/ValueSet/v3-ActEncounterCode"
												},
												{
													"key": "version",
													"value": "2014-03-26"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (USCore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/us/core/STU3.1.1/ValueSet-us-core-condition-category.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"// Not present in source of truth",
													"//pm.test(\"Publishable profile is present in meta\", function () {",
													"//    const responseData = pm.response.json();",
													"//",
													"//    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
													"//});",
													"",
													"// url",
													"pm.test(\"Resource url is http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 3.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"3.1.1\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is US Core Condition Category Codes\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"US Core Condition Category Codes\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2019-05-21\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2019-05-21\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastReviewDate",
													"// author",
													"// keyWord",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category&version=3.1.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
												},
												{
													"key": "version",
													"value": "3.1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (QICore)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Based on source of truth: https://hl7.org/fhir/us/qicore/STU4.1.1/ValueSet-qicore-appropriateness-score.json",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"// profile",
													"pm.test(\"Shareable profile is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url is http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 4.1.1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"4.1.1\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is RAND Appropriateness Scores\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"RAND Appropriateness Scores\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2018-08-22\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2018-08-22\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"// expirationDate",
													"// lastReviewDate",
													"// author",
													"// keyWord",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score&version=4.1.1",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://hl7.org/fhir/us/qicore/ValueSet/qicore-appropriateness-score"
												},
												{
													"key": "version",
													"value": "4.1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable (Authored)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"pm.test(\"Publishable extension is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 20190206\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"20190206\", \"Invalid version\");",
													"});",
													"",
													"// name",
													"pm.test(\"Name is AETNADiabetesHemoglobinA1cTestingMeasureNumerator\", function() {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).to.equal(\"AETNADiabetesHemoglobinA1cTestingMeasureNumerator\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is AETNA Diabetes Hemoglobin A1c testing measure numerator\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"AETNA Diabetes Hemoglobin A1c testing measure numerator\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2022-03-03T18:46:01-05:00\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2022-03-03T18:46:01-05:00\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"pm.test(\"EffectiveDate is 2019-02-06\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueDate).to.equal(\"2019-02-06\", \"effectiveDate error\");",
													"});",
													"",
													"// expirationDate",
													"// lastReviewDate",
													"pm.test(\"LastReviewDate is 2022-12-15\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueDate).to.equal(\"2022-12-15\", \"lastReviewDate error\");",
													"});",
													"",
													"// author",
													"pm.test(\"Author is NJII Author\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/valueset-author\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueString).to.equal(\"NJII Author\", \"author error\");",
													"});",
													"",
													"// keyWord",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279&version=20190206",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1195.279"
												},
												{
													"key": "version",
													"value": "20190206"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Publishable with Keywords (Authored)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"pm.test(\"Publishable extension is present in meta\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.73\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.73\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 20230217\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"20230217\", \"Invalid version\");",
													"});",
													"",
													"// title",
													"pm.test(\"Title is 37 to 42 Plus Weeks Gestation\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.title).to.equal(\"37 to 42 Plus Weeks Gestation\", \"Title error\");",
													"});",
													"",
													"// date",
													"pm.test(\"Date is 2023-02-17T01:03:27-05:00\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.date).to.equal(\"2023-02-17T01:03:27-05:00\", \"Date error\");",
													"});",
													"",
													"// approvalDate",
													"// effectiveDate",
													"pm.test(\"EffectiveDate is 2023-02-17\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueDate).to.equal(\"2023-02-17\", \"effectiveDate error\");",
													"});",
													"",
													"// expirationDate",
													"// lastReviewDate",
													"pm.test(\"LastReviewDate is 2023-02-17\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueDate).to.equal(\"2023-02-17\", \"lastReviewDate error\");",
													"});",
													"",
													"// author",
													"pm.test(\"Author is TJC EH Author\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = null;",
													"    for (let i = 0; i < extensions.length; i++) {",
													"        if (extensions[i].url == \"http://hl7.org/fhir/StructureDefinition/valueset-author\") {",
													"            extension = extensions[i];",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueString).to.equal(\"TJC EH Author\", \"author error\");",
													"});",
													"",
													"// keyWord",
													"pm.test(\"keyword is PC-02\", function() {",
													"    const responseData = pm.response.json();",
													"    const extensions = responseData.entry[0].resource.extension;",
													"    let extension = extensions.find(function(obj) { return obj.url == \"http://hl7.org/fhir/StructureDefinition/valueset-keyWord\"; });",
													"    pm.expect(extension).to.exist;",
													"    pm.expect(extension.valueString).to.equal(\"PC-02\", \"keyword error\");",
													"});",
													"",
													"// copyright",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.73&version=20230217",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.73"
												},
												{
													"key": "version",
													"value": "20230217"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate Publishable ValueSet content for 4 categories of ValueSet:  \nFHIR Ballot-bound (published as part of the FHIR specification)  \nTHO (published in Terminology.HL7.org  \nUS Core (published in the US Core Implementation Guide)  \nQI Core (published in the QI Core Implementation Guide)\n\nEach test validates the content expected by the CQFMPublishableValueSet profile:  \nCQFMPublishableValueSet Required Items:\n\n- title\n    \n- date\n    \n\nCQFMPublishableValueSet Optional/MS Items:\n\n- approvalDate\n    \n- effectiveDate\n    \n- expirationDate\n    \n- lastReviewDate\n    \n- author\n    \n- keyWord\n    \n- copyright"
						},
						{
							"name": "Executable",
							"item": [
								{
									"name": "Executable (Authored)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"// NOTE: This is based on latest as of this test date\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"// Executable ValueSet Required Items\r",
													"// usageWarning\r",
													"pm.test(\"UsageWarning is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    const usageWarning = responseData.extension.find(e => e.url == \"http://hl7.org/fhir/StructureDefinition/valueset-warning\");\r",
													"    pm.expect(usageWarning).exist;\r",
													"    pm.expect(usageWarning.valueMarkdown).equal(\"This value set contains a point-in-time expansion enumerating the codes that meet the value set intent. As new versions of the code systems used by the value set are released, the contents of this expansion will need to be updated to incorporate newly defined codes that meet the value set intent. Before, and periodically during production use, the value set expansion contents SHOULD be updated.\");\r",
													"});\r",
													"\r",
													"// Executable ValueSet MS Items\r",
													"// expansion\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"// expansion.identifier\r",
													"pm.test(\"Expansion identifier is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.identifier).exist;\r",
													"});\r",
													"\r",
													"// expansion.timestamp\r",
													"pm.test(\"Expansion timestamp is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.timestamp).exist;\r",
													"});\r",
													"\r",
													"// expansion.parameter\r",
													"pm.test(\"Expansion parameter is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.parameter).exist;\r",
													"})\r",
													"\r",
													"// expansion.contains\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});\r",
													"\r",
													"// expansion.contains.system\r",
													"// expansion.contains.inactive\r",
													"// expansion.contains.version\r",
													"// expansion.contains.code\r",
													"// expansion.contains.display\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.464.1003.198.12.1005",
												"$expand"
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate that the server supports the CQFMExecutableValueSet profile:\n\nExecutable ValueSet Required Items\n\n- usageWarning\n    \n- expansion\n    \n\nExecutable ValueSet MS Items\n\n- expansion.parameter\n    \n- expansion.contains\n    \n- expansion.contains.system\n    \n- expansion.contains.inactive\n    \n- expansion.contains.version\n    \n- expansion.contains.code\n    \n- expansion.contains.display"
						},
						{
							"name": "Computable",
							"item": [
								{
									"name": "Computable (Authored)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// total\r",
													"pm.test(\"Response total is 1\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.total).to.equal(1);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Computable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/computable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url is http://cts.nlm.nih.gov/fhir/ValueSet/1.1.1\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/1.1.1\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20201019\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"20201019\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"// Computable ValueSet MS Items\r",
													"// compose\r",
													"pm.test(\"Compose is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.compose).exist;\r",
													"});\r",
													"\r",
													"// compose.inactive\r",
													"\r",
													"// compose.include\r",
													"pm.test(\"Include is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.compose.include).exist;\r",
													"});\r",
													"\r",
													"// compose.include.system\r",
													"pm.test(\"System is http://hl7.org/fhir/sid/icd-10-cm\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.compose.include[0].system).equal(\"http://hl7.org/fhir/sid/icd-10-cm\", \"System error\");\r",
													"});\r",
													"\r",
													"// compose.include.version\r",
													"pm.test(\"System version is not present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.compose.include[0].version).to.not.exist;\r",
													"});\r",
													"\r",
													"// compose.include.concept\r",
													"pm.test(\"Concept is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.entry[0].resource.compose.include[0].concept).exist;\r",
													"});\r",
													"\r",
													"// compose.include.filter\r",
													"// compose.include.valueSet\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/1.1.1&version=20201019",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/1.1.1"
												},
												{
													"key": "version",
													"value": "20201019"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate that the server supports the CQFMComputableValueSet profile:\n\nComputable ValueSet MS Items\n\n- compose\n    \n- compose.inactive\n    \n- compose.include\n    \n- compose.include.system\n    \n- compose.include.version\n    \n- compose.include.concept\n    \n- compose.include.filter\n    \n- compose.include.valueSet"
						}
					]
				},
				{
					"name": "Read",
					"item": [
						{
							"name": "Version-Independent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// resourceType\r",
											"pm.test(\"Resource Type is ValueSet\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.resourceType).to.equal(\"ValueSet\");\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Shareable and Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");\r",
											"});\r",
											"\r",
											"// id\r",
											"// NOTE: The id returned is not version-specific to ensure the id in the returned resource matches the id of the request\r",
											"pm.test(\"Resource id equal to 2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.id).equal(\"2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
											"})\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
											"});\r",
											"\r",
											"// version\r",
											"// Should not be tested, given that it will return the latest\r",
											"//pm.test(\"Version is 1.0.0\", function () {\r",
											"//    const responseData = pm.response.json();\r",
											"//\r",
											"//    pm.expect(responseData.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"//});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113883.3.464.1003.198.12.1005"
									]
								}
							},
							"response": []
						},
						{
							"name": "Version-Specific",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// resourceType\r",
											"pm.test(\"Resource Type is ValueSet\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.resourceType).to.equal(\"ValueSet\");\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Shareable and Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\");\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/StructureDefinition/shareablevalueset\");\r",
											"});\r",
											"\r",
											"// id\r",
											"pm.test(\"Resource id equal to 2.16.840.1.113883.3.464.1003.198.12.1005-20190315\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.id).equal(\"2.16.840.1.113883.3.464.1003.198.12.1005-20190315\");\r",
											"})\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 20190315\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005-20190315",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113883.3.464.1003.198.12.1005-20190315"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests version-independent and version-specific read. Both should result in the ValueSet resource directly (not in a bundle). The version-independent read should provide the latest active version of the value set, the version-specific should provide the expected version of the value set."
				},
				{
					"name": "SearchBy",
					"item": [
						{
							"name": "SHALL",
							"item": [
								{
									"name": "ById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 20190315\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"20190315\", \"Invalid version\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?_id=2.16.840.1.113883.3.464.1003.198.12.1005",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "_id",
													"value": "2.16.840.1.113883.3.464.1003.198.12.1005"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByVersionId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"// total",
													"pm.test(\"Response total is 1\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).to.equal(1);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"// url",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");",
													"});",
													"",
													"// version",
													"pm.test(\"Version is 20190315\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).to.equal(\"20190315\", \"Invalid version\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?_id=2.16.840.1.113883.3.464.1003.198.12.1005-20190315",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "_id",
													"value": "2.16.840.1.113883.3.464.1003.198.12.1005-20190315"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is N3MirrorGoldmannExam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"N3MirrorGoldmannExam\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByUrlWithMultipleVersions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Total > 1\", function() {",
													"  pm.expect(pm.response.json().total).greaterThan(1);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Version is 20170801\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.version).equals(\"20170801\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1096.82&&version=20170801",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1096.82"
												},
												{
													"key": null,
													"value": null
												},
												{
													"key": "version",
													"value": "20170801"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Name is InactiveInterventionsRelatedToMedicationManagementMedicationActionPlan\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"InactiveInterventionsRelatedToMedicationManagementMedicationActionPlan\");",
													"});",
													"",
													"pm.test(\"Publisher is PharmacyHIT\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.publisher).equals(\"PharmacyHIT\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?identifier=urn:oid:2.16.840.1.113762.1.4.1096.82",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "identifier",
													"value": "urn:oid:2.16.840.1.113762.1.4.1096.82"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByNameIncorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Searching by name with this value shouldn't return any results, since the value set name is not actually this, but it does...",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Searchset is empty\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.total).equals(0);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?name=3 Mirror Goldmann exam",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "name",
													"value": "3 Mirror Goldmann exam"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is N3MirrorGoldmannExam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"N3MirrorGoldmannExam\");",
													"});",
													"",
													"pm.test(\"url is http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.url).equals(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\");",
													"});",
													"",
													"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?name=N3MirrorGoldmannExam",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "name",
													"value": "N3MirrorGoldmannExam"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByTitle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"name is ACEisAndARBs\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ACEisAndARBs\");",
													"});",
													"",
													"pm.test(\"resourceType is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"id is 2.16.840.1.113762.1.4.1213.11-20190917\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.id).equals(\"2.16.840.1.113762.1.4.1213.11-20190917\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?title=ACEis and ARBs",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "title",
													"value": "ACEis and ARBs"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Total is greater than 0\", function () {",
													"        const responseData = pm.response.json();",
													"// ",
													"    pm.expect(responseData.total).is.greaterThan(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?status=draft",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "status",
													"value": "draft"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"name is ACEInhibitorOrARBOrARNIIngredient\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"ACEInhibitorOrARBOrARNIIngredient\");",
													"});",
													"",
													"pm.test(\"resourceType is ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"id is 2.16.840.1.113883.3.526.3.1489-20230217\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.id).equals(\"2.16.840.1.113883.3.526.3.1489-20230217\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?description=Value%20Set%20Title%20Changed%20--%20from%20Allergen%20to%20Ingredient%20--%20to%20reflect%20true%20value%20set%20content.",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "description",
													"value": "Value%20Set%20Title%20Changed%20--%20from%20Allergen%20to%20Ingredient%20--%20to%20reflect%20true%20value%20set%20content."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"Name is N3MirrorGoldmannExam\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.name).equals(\"N3MirrorGoldmannExam\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?code=420523002",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "code",
													"value": "420523002"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ByKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Resource is a ValueSet\", function () {",
													"        const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.entry[0].resource.resourceType).equals(\"ValueSet\");",
													"});",
													"",
													"pm.test(\"\", function () {",
													"    const responseData = pm.response.json();",
													"    const extensionEntry = responseData.extension.find(m => m.url === \"http://hl7.org/fhir/StructureDefinition/valueset-keyWord\");",
													"    pm.expect(extensionEntry.valueString).to.equal(\"PC-02\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/?keyword=PC-02",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "keyword",
													"value": "PC-02"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ValidateCode",
					"item": [
						{
							"name": "ValidateByUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"/*",
											"pm.test(\"Parameters contain a message of code validity\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"message\");",
											"    pm.expect(parameterEntry.valueString).equals(\"The code(N) is valid in code system LivingArrangement\");",
											"});",
											"*/",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateByVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n        \"name\": \"valueSetVersion\",\n        \"valueString\": \"20200319\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateByActiveOnly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});",
											"",
											"pm.test(\"inactive contain a result of false\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"inactive\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n    \"name\" : \"activeOnly\",\n    \"valueString\" : \"true\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateWithDisplayLanguage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"url\",\n            \"valueString\": \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n        },\n        {\n            \"name\": \"displayLanguage\",\n            \"valueString\": \"english\"\n        },\n        {\n            \"name\": \"code\",\n            \"valueString\": \"420523002\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateCodeWithCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											"",
											"pm.test(\"Parameters contain a display of Goldmann three-mirror contact lens (physical object)\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"display\");",
											"    pm.expect(parameterEntry.valueString).equals(\"Goldmann three-mirror contact lens (physical object)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"valueset\",\n            \"resource\": {\n                \"resourceType\": \"ValueSet\",\n                \"id\": \"2.16.840.1.113762.1.4.1047.611-20200319\",\n                \"meta\": {\n                    \"versionId\": \"8\",\n                    \"lastUpdated\": \"2020-06-30T19:27:46.000-04:00\",\n                    \"profile\": [\n                        \"http://hl7.org/fhir/StructureDefinition/shareablevalueset\",\n                        \"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-valueset-cqfm\"\n                    ],\n                    \"tag\": [\n                        {\n                            \"code\": \"SUBSETTED\",\n                            \"display\": \"subsetted\"\n                        }\n                    ]\n                },\n                \"extension\": [\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/valueset-author\",\n                        \"valueString\": \"ASRS Quality Measure Development Author\"\n                    },\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate\",\n                        \"valueDate\": \"2022-12-15\"\n                    },\n                    {\n                        \"url\": \"http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate\",\n                        \"valueDate\": \"2020-06-30\"\n                    }\n                ],\n                \"url\": \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\",\n                \"identifier\": [\n                    {\n                        \"system\": \"urn:ietf:rfc:3986\",\n                        \"value\": \"urn:oid:2.16.840.1.113762.1.4.1047.611\"\n                    }\n                ],\n                \"version\": \"20200319\",\n                \"name\": \"3 Mirror Goldmann exam\",\n                \"title\": \"3 Mirror Goldmann exam\",\n                \"status\": \"active\",\n                \"experimental\": false,\n                \"date\": \"2020-03-19T01:00:18-04:00\",\n                \"publisher\": \"ASRS Quality Measure Development Steward\",\n                \"jurisdiction\": [\n                    {\n                        \"extension\": [\n                            {\n                                \"url\": \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\",\n                                \"valueString\": \"UNKNOWN\"\n                            }\n                        ]\n                    }\n                ],\n                \"purpose\": \"(Clinical Focus: The intent of this set of values is to capture that an eye exam was performed using Goldman contact lens procedure.),(Data Element Scope: Method or attribute related to procedure performed.),(Inclusion Criteria: The 3 mirror Goldman contact lens is included.),(Exclusion Criteria: All other values that do not meet inclusion criteria are excluded.)\"\n            }\n        },\n        {\n            \"name\": \"code\",\n            \"valueString\": \"420523002\"\n        },\n        {\n            \"name\": \"displayLanguage\",\n            \"valueString\": \"english\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateCodeWithSystem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Resource type is Parameters\", function () {",
											"        const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).equals(\"Parameters\");",
											"});",
											"",
											"pm.test(\"Parameters contain a result of true\", function () {",
											"    const responseData = pm.response.json();",
											"    const parameterEntry = responseData.parameter.find(m => m.name === \"result\");",
											"    pm.expect(parameterEntry.valueBoolean).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n    {\n    \"name\" : \"url\",\n    \"valueString\" : \"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.611\"\n    },\n    {\n      \"name\" : \"code\",\n      \"valueString\" : \"420523002\"\n    },\n    {\n      \"name\" : \"system\",\n      \"valueString\" : \"urn:oid:2.16.840.1.113762.1.4.1047.611\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1047.611-20200319/$validate-code",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"2.16.840.1.113762.1.4.1047.611-20200319",
										"$validate-code"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Expand",
					"item": [
						{
							"name": "Get",
							"item": [
								{
									"name": "ExpandOnId (Latest)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"// NOTE: This is based on latest as of this test date\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.464.1003.198.12.1005",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnVersionId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005-20190315/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.464.1003.198.12.1005-20190315",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnIdWithValueSetVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005/$expand?valueSetVersion=20190315",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.464.1003.198.12.1005",
												"$expand"
											],
											"query": [
												{
													"key": "valueSetVersion",
													"value": "20190315"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnIdWithActiveOnly",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.359\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.359\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20230122\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20230122\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Inactive code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"38719000\" && obj.inactive == true; })).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Active code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"414820001\" && obj.inactive == false; })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1146.359/$expand?valueSetVersion=20230122&activeOnly=false",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113762.1.4.1146.359",
												"$expand"
											],
											"query": [
												{
													"key": "valueSetVersion",
													"value": "20230122"
												},
												{
													"key": "activeOnly",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnIdWithExpansion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20170504\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20170504\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion identifier is eCQM Update 2017-05-05\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.identifier).equal(\"eCQM Update 2017-05-05\");\r",
													"});\r",
													"\r",
													"pm.test(\"Manifest parameter is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.parameter.find(function (obj) { return obj.name == \"manifest\" && obj.valueString == \"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2017-05-05\" })).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function (obj) { return obj.system == \"http://www.nlm.nih.gov/research/umls/rxnorm\" && obj.code == \"197634\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.600.1.1499/$expand?expansion=eCQM%20Update%202017-05-05",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.600.1.1499",
												"$expand"
											],
											"query": [
												{
													"key": "expansion",
													"value": "eCQM%20Update%202017-05-05"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"// NOTE: This is based on latest as of this test date\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithValueSetVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005\");\r",
													"});\r",
													"\r",
													"// version\r",
													"// NOTE: This is based on latest as of this test date\r",
													"pm.test(\"Version is 20190315\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20190315\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"14693006\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005&valueSetVersion=20190315",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005"
												},
												{
													"key": "valueSetVersion",
													"value": "20190315"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithSystemVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\");\r",
													"});\r",
													"\r",
													"// version\r",
													"// NOTE: This is based on latest as of this test date\r",
													"pm.test(\"Version is 20220217\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20220217\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://www.nlm.nih.gov/research/umls/rxnorm\" && obj.code == \"1928948\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499&system-version=http://www.nlm.nih.gov/research/umls/rxnorm|10012018",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499"
												},
												{
													"key": "system-version",
													"value": "http://www.nlm.nih.gov/research/umls/rxnorm|10012018"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithInvalidSystemVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499&system-version=http://www.nlm.nih.gov/research/umls/rxnorm|11112018",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499"
												},
												{
													"key": "system-version",
													"value": "http://www.nlm.nih.gov/research/umls/rxnorm|11112018"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithExpansion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 20170504\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"20170504\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion identifier is eCQM Update 2017-05-05\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.identifier).equal(\"eCQM Update 2017-05-05\");\r",
													"});\r",
													"\r",
													"pm.test(\"Manifest parameter is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.parameter.find(function(obj) { return obj.name == \"manifest\" && obj.valueString == \"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2017-05-05\" })).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Code is present\", function() {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://www.nlm.nih.gov/research/umls/rxnorm\" && obj.code == \"197634\" })).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499&expansion=eCQM%20Update%202017-05-05",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											],
											"query": [
												{
													"key": "url",
													"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1499"
												},
												{
													"key": "expansion",
													"value": "eCQM%20Update%202017-05-05"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Post",
							"item": [
								{
									"name": "ExpandWithValuesetVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"valueSetVersion\",\n       \"valueString\": \"4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithActiveOnly",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"activeOnly\",\n       \"valueString\": \"true\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithDisplayLanguage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n       \"name\": \"displayLanguage\",\n       \"valueString\": \"english\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithLimitedExpansion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"limitedExpansion\",\n     \"valueBoolean\": \"true\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithDefaultToLatestVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"defaultToLatestVersion\",\n     \"valueBoolean\": \"true\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithSystemVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithCheckSystemVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"check-system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithForceSystemVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"force-system-version\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithCanonicalVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"canonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithCheckCanonicalVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"checkCanonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandWithForceCanonoicalVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Test that version is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.version).exist;",
													"});",
													"",
													"pm.test(\"Name is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.name).exist;",
													"});",
													"",
													"pm.test(\"Status is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).exist;",
													"});",
													"",
													"pm.test(\"Publisher is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.publisher).exist;",
													"});",
													"",
													"pm.test(\"Title is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title).exist;",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.date).exist;",
													"});",
													"",
													"pm.test(\"Expansion is present\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.expansion).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"resourceType\" : \"Parameters\",\n  \"parameter\" : [\n     {\n     \"name\" : \"url\",\n     \"valueUri\": \"http://hl7.org/fhir/ValueSet/care-team-status\"},\n     {\n     \"name\" : \"forceCanonicalVersion\",\n     \"valueCanonical\": \"http://hl7.org/fhir/care-team-status|4.0.1\"\n     }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"$expand"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TImeouts",
							"item": [
								{
									"name": "ExpandOnId (2.16.840.1.113762.1.4.1034.127)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 120s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(120000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1034.127/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113762.1.4.1034.127",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnId (2.16.840.1.113883.3.526.2.1079)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 120s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(120000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.526.2.1079/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.526.2.1079",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnId (2.16.840.1.113762.1.4.1146.1407)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 120s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(120000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113762.1.4.1146.1407/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113762.1.4.1146.1407",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnId (2.16.840.1.113883.3.3157.1004.28)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 120s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(120000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.3157.1004.28/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.3157.1004.28",
												"$expand"
											]
										}
									},
									"response": []
								},
								{
									"name": "ExpandOnId (2.16.840.1.113883.3.464.1003.199.11.1104)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Executable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
													"});\r",
													"\r",
													"pm.test(\"Expansion is present\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.expansion).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 120s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(120000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}ValueSet/2.16.840.1.113883.3.464.1003.199.11.1104/$expand",
											"host": [
												"{{SERVER_URL}}ValueSet"
											],
											"path": [
												"2.16.840.1.113883.3.464.1003.199.11.1104",
												"$expand"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "QualityProgram",
			"item": [
				{
					"name": "Representation",
					"item": [
						{
							"name": "Shareable",
							"item": [
								{
									"name": "Quality Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// resourceType\r",
													"pm.test(\"ResourceType is Library\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.resourceType).to.equal(\"Library\");\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Publishable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 1.0.0\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"// TODO: Quality Program Required Items\r",
													"// identifier\r",
													"// name\r",
													"// title\r",
													"// status\r",
													"// experimental\r",
													"// type\r",
													"// date\r",
													"// publisher\r",
													"// description\r",
													"\r",
													"// TODO: Quality Program MS Items\r",
													"// directReferenceCode\r",
													"// cqlOptions\r",
													"// expansionParameters\r",
													"// useContext:qualityProgram\r",
													"// jurisdiction\r",
													"// effectivePeriod\r",
													"// relatedArtifact:measure\r",
													"// relatedArtifact:dependency\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}Library/ecqm-update-2022-05-05",
											"host": [
												"{{SERVER_URL}}Library"
											],
											"path": [
												"ecqm-update-2022-05-05"
											]
										}
									},
									"response": []
								}
							],
							"description": "Tests tests validate that the server supports Quality Program representation according to the CQFMQualityProgram profile:\n\nQuality Program Required Items\n\n- url\n- identifier\n- version\n- name\n- title\n- status\n- experimental\n- type\n- date\n- publisher\n- description\n    \n\nQuality Program MS Items\n\n- directReferenceCode\n- cqlOptions\n- expansionParameters\n- useContext:qualityProgram\n- jurisdiction\n- effectivePeriod\n- relatedArtifact:measure\n- relatedArtifact:dependency"
						},
						{
							"name": "Publishable",
							"item": [
								{
									"name": "Quality Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// resourceType\r",
													"pm.test(\"Resource type is Library\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.resourceType).to.equal(\"Library\");\r",
													"});\r",
													"\r",
													"// profile\r",
													"pm.test(\"Publishable profile is present in meta\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
													"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
													"});\r",
													"\r",
													"// url\r",
													"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
													"});\r",
													"\r",
													"// version\r",
													"pm.test(\"Version is 1.0.0\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
													"});\r",
													"\r",
													"// TODO: Publishable Library Required Items\r",
													"// profile\r",
													"// title\r",
													"// date\r",
													"\r",
													"// TODO: Publishable Library Must Support Items\r",
													"// purpose\r",
													"// usage\r",
													"// copyright\r",
													"// approvalDate\r",
													"// lastReviewDate\r",
													"// effectivePeriod\r",
													"// topic\r",
													"// author\r",
													"// editor\r",
													"// reviewer\r",
													"// endorser\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{SERVER_URL}}Library/ecqm-update-2022-05-05",
											"host": [
												"{{SERVER_URL}}Library"
											],
											"path": [
												"ecqm-update-2022-05-05"
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests validate that the server supports the CQFMPublishableLibrary profile for quality programs:\n\nPublishable Library Required Items\n\n- profile\n    \n- title\n    \n- date\n    \n\nPublishable Library Must Support Items\n\n- purpose\n    \n- usage\n    \n- copyright\n    \n- approvalDate\n    \n- lastReviewDate\n    \n- effectivePeriod\n    \n- topic\n    \n- author\n    \n- editor\n    \n- reviewer\n    \n- endorser"
						}
					]
				},
				{
					"name": "Read",
					"item": [
						{
							"name": "Quality Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// resourceType\r",
											"pm.test(\"Resource Type is Library\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.resourceType).to.equal(\"Library\");\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/ecqm-update-2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										"ecqm-update-2022-05-05"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search",
					"item": [
						{
							"name": "byUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?url=http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byVersion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?url=http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05&version=1.0.0",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05"
										},
										{
											"key": "version",
											"value": "1.0.0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?identifier=ecqm-update-2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "identifier",
											"value": "ecqm-update-2022-05-05"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?name=eCQM Update 2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "name",
											"value": "eCQM Update 2022-05-05"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?title=eCQM Update 2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "title",
											"value": "eCQM Update 2022-05-05"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?url=http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05&status=active",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05"
										},
										{
											"key": "status",
											"value": "active"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?description=eCQM Update 2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "description",
											"value": "eCQM Update 2022-05-05"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "byExpansionIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// total\r",
											"pm.test(\"Response total is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.total).to.equal(1);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Publishable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/publishable-library-cqfm\");\r",
											"    pm.expect(responseData.entry[0].resource.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/quality-program-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.url).equal(\"http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2022-05-05\");\r",
											"});\r",
											"\r",
											"// version\r",
											"pm.test(\"Version is 1.0.0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.entry[0].resource.version).to.equal(\"1.0.0\", \"Invalid version\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}Library/?expansion-identifier=eCQM Update 2022-05-05",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "expansion-identifier",
											"value": "eCQM Update 2022-05-05"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Expansion Rules",
					"item": []
				},
				{
					"name": "Manifest Support",
					"item": [
						{
							"name": "ExpandWithUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Executable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\");\r",
											"});\r",
											"\r",
											"// version\r",
											"// NOTE: This is based on latest as of this test date\r",
											"pm.test(\"Version is 20200306\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.version).to.equal(\"20200306\", \"Invalid version\");\r",
											"});\r",
											"\r",
											"pm.test(\"Expansion is present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion).exist;\r",
											"});\r",
											"\r",
											"// NOTE: SNOMED Version here is based on latest version\r",
											"pm.test(\"Code is present\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.version == \"http://snomed.info/sct/731000124108/version/20230901\" && obj.code == \"107691000119101\" })).exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithParameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Executable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\");\r",
											"});\r",
											"\r",
											"// version\r",
											"// NOTE: This is based on latest as of this test date\r",
											"pm.test(\"Version is 20200306\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.version).to.equal(\"20200306\", \"Invalid version\");\r",
											"});\r",
											"\r",
											"pm.test(\"Expansion is present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion).exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Code is present\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"107691000119101\" })).exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010&valueSetVersion=20200306&activeOnly=false&system-version=http://hl7.org/fhir/sid/icd-10-cm|2022&system-version=http://snomed.info/sct|http://snomed.info/sct/731000124108/version/20220901&canonicalVersion=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1078|20220218&canonicalVersion=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1079|20230217",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010"
										},
										{
											"key": "valueSetVersion",
											"value": "20200306"
										},
										{
											"key": "activeOnly",
											"value": "false"
										},
										{
											"key": "system-version",
											"value": "http://hl7.org/fhir/sid/icd-10-cm|2022"
										},
										{
											"key": "system-version",
											"value": "http://snomed.info/sct|http://snomed.info/sct/731000124108/version/20220901"
										},
										{
											"key": "canonicalVersion",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1078|20220218"
										},
										{
											"key": "canonicalVersion",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.2.1079|20230217"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpandWithManifest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// profile\r",
											"pm.test(\"Executable profile is present in meta\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.meta.profile).contains(\"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/executable-valueset-cqfm\");\r",
											"});\r",
											"\r",
											"// url\r",
											"pm.test(\"Resource url equal to http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.url).equal(\"http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010\");\r",
											"});\r",
											"\r",
											"// version\r",
											"// NOTE: This is based on latest as of this test date\r",
											"pm.test(\"Version is 20200306\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.version).to.equal(\"20200306\", \"Invalid version\");\r",
											"});\r",
											"\r",
											"pm.test(\"Expansion is present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion).exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Code is present\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.expansion.contains.find(function(obj) { return obj.system == \"http://snomed.info/sct\" && obj.code == \"107691000119101\" && obj.version != \"http://snomed.info/sct/731000124108/version/20230901\" })).exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}ValueSet/$expand?url=http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010&manifest=http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2023-05-04",
									"host": [
										"{{SERVER_URL}}ValueSet"
									],
									"path": [
										"$expand"
									],
									"query": [
										{
											"key": "url",
											"value": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1010"
										},
										{
											"key": "manifest",
											"value": "http://cts.nlm.nih.gov/fhir/Library/ecqm-update-2023-05-04"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Package",
					"item": []
				},
				{
					"name": "Release",
					"item": [
						{
							"name": "Create Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
											"});",
											"",
											"",
											"pm.test(\"Resource Type should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Resource Type should be transaction-response\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"",
											"pm.test(\"Test that id is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"draft\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library",
									"host": [
										"{{SERVER_URL}}Library"
									]
								}
							},
							"response": []
						},
						{
							"name": "Libraries Unique",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"draft\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library that should be rejected due to duplicate url and version\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library",
									"host": [
										"{{SERVER_URL}}Library"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
											"});",
											"",
											"",
											"pm.test(\"Resource Type should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Resource Type should be transaction-response\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"",
											"pm.test(\"Test that id is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"draft\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library/postLibraryTest",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										"postLibraryTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).equals(\"200\");",
											"});",
											"",
											"",
											"pm.test(\"Resource Type should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Resource Type should be transaction-response\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"pm.test(\"Test that id is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Status is active\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).equals(\"active\");",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"active\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library/postLibraryTest",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										"postLibraryTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Libraries Immutable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is NOT 200\", function () {",
											"    pm.expect(pm.response.code).not.equals(\"200\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"active\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"test logic library should be rejected, because library is not in draft mode\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library/postLibraryTest",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										"postLibraryTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retire Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).equals(\"200\");",
											"});",
											"",
											"",
											"pm.test(\"Resource Type should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Resource Type should be transaction-response\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"pm.test(\"Test that id is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Status is retired\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).equals(\"retired\");",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Library\",\n    \"id\": \"postLibraryTest\",\n    \"title\": \"Post Library Test\",\n    \"status\": \"retired\",\n    \"version\": \"0.0.1\",\n    \"url\": \"postLibraryTest\",\n    \"type\": {\n        \"coding\": [\n            {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/library-type\",\n                \"code\": \"logic-library\",\n                \"display\": \"Logic Library\"\n            }\n        ],\n        \"text\": \"Test Logic Library, test using PUT to update\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}Library/postLibraryTest",
									"host": [
										"{{SERVER_URL}}Library"
									],
									"path": [
										"postLibraryTest"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Server",
			"item": [
				{
					"name": "Terminology Mode",
					"item": [
						{
							"name": "GET Terminology Capability Statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Resource Type should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Test that id is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Test that codeSystem is not empty\", function (){",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.codeSystem).to.exist.and.to.not.be.empty;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}metadata?mode=terminology",
									"host": [
										"{{SERVER_URL}}metadata"
									],
									"query": [
										{
											"key": "mode",
											"value": "terminology"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Batch",
					"item": []
				},
				{
					"name": "String Search",
					"item": []
				},
				{
					"name": "Combination Search",
					"item": []
				}
			]
		},
		{
			"name": "CapabilityStatement",
			"item": [
				{
					"name": "GET Capability Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Resource Type should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.resourceType).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Test that id is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"// TODO: Tests for capability statement functionality"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER_URL}}metadata",
							"host": [
								"{{SERVER_URL}}metadata"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{basicPass}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{basicUser}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({key: 'Accept', value: 'application/fhir+json' })"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}